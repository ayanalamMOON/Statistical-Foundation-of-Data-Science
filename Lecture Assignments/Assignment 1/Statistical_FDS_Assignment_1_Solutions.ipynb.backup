{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "464e8d24",
   "metadata": {},
   "source": [
    "# Statistical Foundation of Data Science - Assignment 1 Solutions\n",
    "\n",
    "**Course Name:** Statistical Foundation of Data Science  \n",
    "**Course Code:** CSU 1658  \n",
    "**Max Points:** 50  \n",
    "\n",
    "\n",
    "This notebook contains step-by-step solutions to all assignment problems."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a339e2f7",
   "metadata": {},
   "source": [
    "## Environment Setup and Dependencies\n",
    "\n",
    "Before executing this notebook, ensure all required packages are installed in your virtual environment. This section will install and verify all necessary dependencies for statistical analysis and data visualization.\n",
    "\n",
    "### Required Dependencies:\n",
    "- **pandas**: Data manipulation and analysis library\n",
    "- **numpy**: Numerical computing library for arrays and mathematical functions\n",
    "- **matplotlib**: Comprehensive plotting library for creating static visualizations\n",
    "- **seaborn**: Statistical data visualization library built on matplotlib\n",
    "- **scipy**: Scientific computing library containing statistical functions and tests\n",
    "- **jupyter**: For notebook environment (if not already installed)\n",
    "\n",
    "Run the following cell to install all dependencies in your virtual environment:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "55e0e96b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Installing and verifying dependencies...\n",
      "==================================================\n",
      "✓ pandas is already installed\n",
      "✓ numpy is already installed\n",
      "✓ matplotlib is already installed\n",
      "✓ seaborn is already installed\n",
      "✓ scipy is already installed\n",
      "✓ jupyter is already installed\n",
      "\n",
      "==================================================\n",
      "All dependencies installed successfully!\n",
      "You can now proceed with the assignment solutions.\n",
      "\n",
      "✓ All imports successful - Ready to proceed!\n"
     ]
    }
   ],
   "source": [
    "# Dependency Installation and Verification\n",
    "import subprocess\n",
    "import sys\n",
    "import pkg_resources\n",
    "\n",
    "def install_package(package):\n",
    "    \"\"\"Install a package using pip if not already installed\"\"\"\n",
    "    try:\n",
    "        pkg_resources.get_distribution(package)\n",
    "        print(f\"✓ {package} is already installed\")\n",
    "    except pkg_resources.DistributionNotFound:\n",
    "        print(f\"Installing {package}...\")\n",
    "        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", package])\n",
    "        print(f\"✓ {package} installed successfully\")\n",
    "\n",
    "# List of required packages\n",
    "required_packages = [\n",
    "    'pandas>=1.3.0',\n",
    "    'numpy>=1.21.0',\n",
    "    'matplotlib>=3.4.0',\n",
    "    'seaborn>=0.11.0',\n",
    "    'scipy>=1.7.0',\n",
    "    'jupyter>=1.0.0'\n",
    "]\n",
    "\n",
    "print(\"Installing and verifying dependencies...\")\n",
    "print(\"=\" * 50)\n",
    "\n",
    "for package in required_packages:\n",
    "    package_name = package.split('>=')[0]  # Extract package name without version\n",
    "    install_package(package_name)\n",
    "\n",
    "print(\"\\n\" + \"=\" * 50)\n",
    "print(\"All dependencies installed successfully!\")\n",
    "print(\"You can now proceed with the assignment solutions.\")\n",
    "\n",
    "# Verify installations by importing\n",
    "try:\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "    import matplotlib.pyplot as plt\n",
    "    import seaborn as sns\n",
    "    from scipy import stats\n",
    "    print(\"\\n✓ All imports successful - Ready to proceed!\")\n",
    "except ImportError as e:\n",
    "    print(f\"\\n✗ Import error: {e}\")\n",
    "    print(\"Please restart the kernel and try again.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b5673dc0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "from scipy.stats import chi2_contingency, pearsonr, spearmanr\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set display options for better output\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.width', None)\n",
    "pd.set_option('display.max_colwidth', None)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "319fab77",
   "metadata": {},
   "source": [
    "## Very Short Questions (5 × 2 = 10 marks)\n",
    "\n",
    "### Q1. Explain the different types of Data Structures in Pandas."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef5cf7c9",
   "metadata": {},
   "source": [
    "**Answer:**\n",
    "\n",
    "Pandas provides two fundamental data structures that form the backbone of data analysis in Python. Understanding these structures is crucial for effective data manipulation and analysis.\n",
    "\n",
    "## Primary Data Structures in Pandas\n",
    "\n",
    "### 1. Series (One-Dimensional Data Structure)\n",
    "\n",
    "A **Series** is a one-dimensional labeled array capable of holding any data type including integers, strings, floating-point numbers, Python objects, and more.\n",
    "\n",
    "**Key Characteristics:**\n",
    "- **Homogeneous Data**: All elements in a Series must be of the same data type\n",
    "- **Labeled Index**: Each element has an associated label (index) for easy access\n",
    "- **Size Immutable**: Once created, the size cannot be changed (though values can be modified)\n",
    "- **Vector Operations**: Supports vectorized operations and broadcasting\n",
    "\n",
    "**Mathematical Representation:**\n",
    "If we have a Series S with n elements, it can be represented as:\n",
    "```\n",
    "S = {(i₁, v₁), (i₂, v₂), ..., (iₙ, vₙ)}\n",
    "```\n",
    "Where:\n",
    "- i₁, i₂, ..., iₙ are the index labels\n",
    "- v₁, v₂, ..., vₙ are the corresponding values\n",
    "\n",
    "**Use Cases:**\n",
    "- Time series data (stock prices over time)\n",
    "- Single column of data from a dataset\n",
    "- Results of statistical calculations\n",
    "- Intermediate results in data processing pipelines\n",
    "\n",
    "### 2. DataFrame (Two-Dimensional Data Structure)\n",
    "\n",
    "A **DataFrame** is a two-dimensional labeled data structure with columns of potentially different types. It is the most commonly used pandas object and resembles a spreadsheet or SQL table.\n",
    "\n",
    "**Key Characteristics:**\n",
    "- **Heterogeneous Data**: Different columns can contain different data types\n",
    "- **Row and Column Labels**: Both axes (rows and columns) have labeled indices\n",
    "- **Size Mutable**: Columns can be added, deleted, or modified\n",
    "- **Tabular Structure**: Represents data in a table format with rows and columns\n",
    "\n",
    "**Mathematical Representation:**\n",
    "A DataFrame D with m rows and n columns can be represented as:\n",
    "```\n",
    "D = {(rᵢ, cⱼ, vᵢⱼ) | i ∈ [1,m], j ∈ [1,n]}\n",
    "```\n",
    "Where:\n",
    "- rᵢ represents the row index\n",
    "- cⱼ represents the column index  \n",
    "- vᵢⱼ represents the value at position (i,j)\n",
    "\n",
    "**Use Cases:**\n",
    "- Complete datasets with multiple variables\n",
    "- Database query results\n",
    "- Spreadsheet-like data manipulation\n",
    "- Statistical analysis requiring multiple columns\n",
    "\n",
    "### Comparison Summary\n",
    "\n",
    "| Aspect | Series | DataFrame |\n",
    "|--------|--------|-----------|\n",
    "| Dimensions | 1D | 2D |\n",
    "| Data Types | Homogeneous | Heterogeneous (per column) |\n",
    "| Index | Single index | Row and column indices |\n",
    "| Structure | Vector-like | Table-like |\n",
    "| Memory Usage | Lower | Higher |\n",
    "| Complexity | Simple | Complex |\n",
    "\n",
    "### Practical Demonstration\n",
    "\n",
    "The following code examples illustrate the creation and basic operations of both data structures:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e3f0b2d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PANDAS DATA STRUCTURES DEMONSTRATION\n",
      "============================================================\n",
      "\n",
      "1. PANDAS SERIES EXAMPLES\n",
      "----------------------------------------\n",
      "Example 1: Series with Custom Index\n",
      "Temperature Series:\n",
      "New York    22.5\n",
      "London      25.1\n",
      "Tokyo       23.8\n",
      "Sydney      26.2\n",
      "Mumbai      24.9\n",
      "Name: Temperature_Celsius, dtype: float64\n",
      "\n",
      "Series Type: <class 'pandas.core.series.Series'>\n",
      "Data Type: float64\n",
      "Series Name: Temperature_Celsius\n",
      "Index: ['New York', 'London', 'Tokyo', 'Sydney', 'Mumbai']\n",
      "Values: [np.float64(22.5), np.float64(25.1), np.float64(23.8), np.float64(26.2), np.float64(24.9)]\n",
      "\n",
      "------------------------------\n",
      "Example 2: Series with Default Index\n",
      "Sales Series:\n",
      "0    1500\n",
      "1    2300\n",
      "2    1800\n",
      "3    2100\n",
      "4    1950\n",
      "Name: Monthly_Sales, dtype: int64\n",
      "\n",
      "------------------------------\n",
      "Example 3: Series Operations\n",
      "Mean temperature: 24.50°C\n",
      "Maximum temperature: 26.20°C\n",
      "City with highest temperature: Sydney\n",
      "\n",
      "Statistical Summary:\n",
      "count     5.000000\n",
      "mean     24.500000\n",
      "std       1.405347\n",
      "min      22.500000\n",
      "25%      23.800000\n",
      "50%      24.900000\n",
      "75%      25.100000\n",
      "max      26.200000\n",
      "Name: Temperature_Celsius, dtype: float64\n",
      "\n",
      "============================================================\n",
      "\n",
      "2. PANDAS DATAFRAME EXAMPLES\n",
      "----------------------------------------\n",
      "Example 1: DataFrame from Dictionary\n",
      "Employee DataFrame:\n",
      "   Employee_ID           Name   Department  Salary  Years_Experience  \\\n",
      "0          101  Alice Johnson  Engineering   75000                 5   \n",
      "1          102      Bob Smith    Marketing   62000                 3   \n",
      "2          103  Charlie Brown  Engineering   78000                 7   \n",
      "3          104     Diana Ross        Sales   58000                 2   \n",
      "4          105  Edward Wilson           HR   65000                 4   \n",
      "\n",
      "   Performance_Score  \n",
      "0                4.2  \n",
      "1                3.8  \n",
      "2                4.5  \n",
      "3                3.9  \n",
      "4                4.1  \n",
      "\n",
      "DataFrame Type: <class 'pandas.core.frame.DataFrame'>\n",
      "Shape (rows, columns): (5, 6)\n",
      "Column Names: ['Employee_ID', 'Name', 'Department', 'Salary', 'Years_Experience', 'Performance_Score']\n",
      "Index: [0, 1, 2, 3, 4]\n",
      "\n",
      "------------------------------\n",
      "Example 2: DataFrame Information\n",
      "\n",
      "Data Types:\n",
      "Employee_ID            int64\n",
      "Name                  object\n",
      "Department            object\n",
      "Salary                 int64\n",
      "Years_Experience       int64\n",
      "Performance_Score    float64\n",
      "dtype: object\n",
      "\n",
      "DataFrame Info:\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5 entries, 0 to 4\n",
      "Data columns (total 6 columns):\n",
      " #   Column             Non-Null Count  Dtype  \n",
      "---  ------             --------------  -----  \n",
      " 0   Employee_ID        5 non-null      int64  \n",
      " 1   Name               5 non-null      object \n",
      " 2   Department         5 non-null      object \n",
      " 3   Salary             5 non-null      int64  \n",
      " 4   Years_Experience   5 non-null      int64  \n",
      " 5   Performance_Score  5 non-null      float64\n",
      "dtypes: float64(1), int64(3), object(2)\n",
      "memory usage: 372.0+ bytes\n",
      "None\n",
      "\n",
      "Numerical Statistics:\n",
      "       Employee_ID        Salary  Years_Experience  Performance_Score\n",
      "count     5.000000      5.000000          5.000000           5.000000\n",
      "mean    103.000000  67600.000000          4.200000           4.100000\n",
      "std       1.581139   8561.541917          1.923538           0.273861\n",
      "min     101.000000  58000.000000          2.000000           3.800000\n",
      "25%     102.000000  62000.000000          3.000000           3.900000\n",
      "50%     103.000000  65000.000000          4.000000           4.100000\n",
      "75%     104.000000  75000.000000          5.000000           4.200000\n",
      "max     105.000000  78000.000000          7.000000           4.500000\n",
      "\n",
      "------------------------------\n",
      "Example 3: DataFrame Operations\n",
      "Salary Statistics:\n",
      "count        5.000000\n",
      "mean     67600.000000\n",
      "std       8561.541917\n",
      "min      58000.000000\n",
      "25%      62000.000000\n",
      "50%      65000.000000\n",
      "75%      75000.000000\n",
      "max      78000.000000\n",
      "Name: Salary, dtype: float64\n",
      "\n",
      "High Performers (Score > 4.0):\n",
      "            Name   Department  Performance_Score\n",
      "0  Alice Johnson  Engineering                4.2\n",
      "2  Charlie Brown  Engineering                4.5\n",
      "4  Edward Wilson           HR                4.1\n",
      "\n",
      "Average Salary by Department:\n",
      "Department\n",
      "Engineering    76500.0\n",
      "HR             65000.0\n",
      "Marketing      62000.0\n",
      "Sales          58000.0\n",
      "Name: Salary, dtype: float64\n",
      "\n",
      "============================================================\n",
      "\n",
      "3. SERIES vs DATAFRAME RELATIONSHIPS\n",
      "----------------------------------------\n",
      "Extracting Series from DataFrame:\n",
      "Name column as Series:\n",
      "0    Alice Johnson\n",
      "1        Bob Smith\n",
      "2    Charlie Brown\n",
      "3       Diana Ross\n",
      "4    Edward Wilson\n",
      "Name: Name, dtype: object\n",
      "Type: <class 'pandas.core.series.Series'>\n",
      "\n",
      "------------------------------\n",
      "Creating DataFrame from Multiple Series:\n",
      "Product DataFrame from Series:\n",
      "    ID   Product   Price\n",
      "0  201    Laptop  999.99\n",
      "1  202     Mouse   25.50\n",
      "2  203  Keyboard   75.00\n",
      "\n",
      "============================================================\n",
      "SUMMARY OF KEY DIFFERENCES:\n",
      "----------------------------------------\n",
      "1. Dimensionality: Series (1D) vs DataFrame (2D)\n",
      "2. Data Types: Series (homogeneous) vs DataFrame (heterogeneous per column)\n",
      "3. Indexing: Series (single index) vs DataFrame (row + column indices)\n",
      "4. Use Cases: Series (single variable) vs DataFrame (multiple variables)\n",
      "5. Memory: Series (lower overhead) vs DataFrame (higher overhead)\n",
      "\n",
      "Memory Usage Comparison:\n",
      "Temperature Series: 316 bytes\n",
      "Employee DataFrame: 878 bytes\n"
     ]
    }
   ],
   "source": [
    "# Comprehensive Demonstration of Pandas Data Structures\n",
    "\n",
    "print(\"PANDAS DATA STRUCTURES DEMONSTRATION\")\n",
    "print(\"=\" * 60)\n",
    "\n",
    "# ==========================================\n",
    "# PART 1: PANDAS SERIES DEMONSTRATION\n",
    "# ==========================================\n",
    "print(\"\\n1. PANDAS SERIES EXAMPLES\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Example 1: Creating a Series with explicit index\n",
    "print(\"Example 1: Series with Custom Index\")\n",
    "temperature_data = [22.5, 25.1, 23.8, 26.2, 24.9]\n",
    "cities = ['New York', 'London', 'Tokyo', 'Sydney', 'Mumbai']\n",
    "temperature_series = pd.Series(temperature_data, index=cities, name='Temperature_Celsius')\n",
    "\n",
    "print(\"Temperature Series:\")\n",
    "print(temperature_series)\n",
    "print(f\"\\nSeries Type: {type(temperature_series)}\")\n",
    "print(f\"Data Type: {temperature_series.dtype}\")\n",
    "print(f\"Series Name: {temperature_series.name}\")\n",
    "print(f\"Index: {list(temperature_series.index)}\")\n",
    "print(f\"Values: {list(temperature_series.values)}\")\n",
    "\n",
    "# Example 2: Series with automatic index\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "print(\"Example 2: Series with Default Index\")\n",
    "sales_data = [1500, 2300, 1800, 2100, 1950]\n",
    "sales_series = pd.Series(sales_data, name='Monthly_Sales')\n",
    "print(\"Sales Series:\")\n",
    "print(sales_series)\n",
    "\n",
    "# Example 3: Series operations\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "print(\"Example 3: Series Operations\")\n",
    "print(f\"Mean temperature: {temperature_series.mean():.2f}°C\")\n",
    "print(f\"Maximum temperature: {temperature_series.max():.2f}°C\")\n",
    "print(f\"City with highest temperature: {temperature_series.idxmax()}\")\n",
    "\n",
    "# Statistical summary\n",
    "print(\"\\nStatistical Summary:\")\n",
    "print(temperature_series.describe())\n",
    "\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "\n",
    "# ==========================================\n",
    "# PART 2: PANDAS DATAFRAME DEMONSTRATION\n",
    "# ==========================================\n",
    "print(\"\\n2. PANDAS DATAFRAME EXAMPLES\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Example 1: Creating DataFrame from dictionary\n",
    "print(\"Example 1: DataFrame from Dictionary\")\n",
    "employee_data = {\n",
    "    'Employee_ID': [101, 102, 103, 104, 105],\n",
    "    'Name': ['Alice Johnson', 'Bob Smith', 'Charlie Brown', 'Diana Ross', 'Edward Wilson'],\n",
    "    'Department': ['Engineering', 'Marketing', 'Engineering', 'Sales', 'HR'],\n",
    "    'Salary': [75000, 62000, 78000, 58000, 65000],\n",
    "    'Years_Experience': [5, 3, 7, 2, 4],\n",
    "    'Performance_Score': [4.2, 3.8, 4.5, 3.9, 4.1]\n",
    "}\n",
    "\n",
    "employee_df = pd.DataFrame(employee_data)\n",
    "print(\"Employee DataFrame:\")\n",
    "print(employee_df)\n",
    "\n",
    "print(f\"\\nDataFrame Type: {type(employee_df)}\")\n",
    "print(f\"Shape (rows, columns): {employee_df.shape}\")\n",
    "print(f\"Column Names: {list(employee_df.columns)}\")\n",
    "print(f\"Index: {list(employee_df.index)}\")\n",
    "\n",
    "# Example 2: DataFrame information and statistics\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "print(\"Example 2: DataFrame Information\")\n",
    "print(\"\\nData Types:\")\n",
    "print(employee_df.dtypes)\n",
    "\n",
    "print(\"\\nDataFrame Info:\")\n",
    "print(employee_df.info())\n",
    "\n",
    "print(\"\\nNumerical Statistics:\")\n",
    "print(employee_df.describe())\n",
    "\n",
    "# Example 3: DataFrame operations\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "print(\"Example 3: DataFrame Operations\")\n",
    "\n",
    "# Selecting specific columns\n",
    "print(\"Salary Statistics:\")\n",
    "salary_stats = employee_df['Salary'].describe()\n",
    "print(salary_stats)\n",
    "\n",
    "# Filtering data\n",
    "high_performers = employee_df[employee_df['Performance_Score'] > 4.0]\n",
    "print(f\"\\nHigh Performers (Score > 4.0):\")\n",
    "print(high_performers[['Name', 'Department', 'Performance_Score']])\n",
    "\n",
    "# Grouping by department\n",
    "print(f\"\\nAverage Salary by Department:\")\n",
    "dept_salary = employee_df.groupby('Department')['Salary'].mean()\n",
    "print(dept_salary)\n",
    "\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "\n",
    "# ==========================================\n",
    "# PART 3: COMPARISON AND RELATIONSHIPS\n",
    "# ==========================================\n",
    "print(\"\\n3. SERIES vs DATAFRAME RELATIONSHIPS\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Extract a Series from DataFrame\n",
    "print(\"Extracting Series from DataFrame:\")\n",
    "name_series = employee_df['Name']\n",
    "print(f\"Name column as Series:\")\n",
    "print(name_series)\n",
    "print(f\"Type: {type(name_series)}\")\n",
    "\n",
    "# Create DataFrame from multiple Series\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "print(\"Creating DataFrame from Multiple Series:\")\n",
    "\n",
    "# Create individual Series\n",
    "ids = pd.Series([201, 202, 203], name='Product_ID')\n",
    "products = pd.Series(['Laptop', 'Mouse', 'Keyboard'], name='Product_Name')\n",
    "prices = pd.Series([999.99, 25.50, 75.00], name='Price')\n",
    "\n",
    "# Combine into DataFrame\n",
    "product_df = pd.DataFrame({'ID': ids, 'Product': products, 'Price': prices})\n",
    "print(\"Product DataFrame from Series:\")\n",
    "print(product_df)\n",
    "\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "print(\"SUMMARY OF KEY DIFFERENCES:\")\n",
    "print(\"-\" * 40)\n",
    "print(\"1. Dimensionality: Series (1D) vs DataFrame (2D)\")\n",
    "print(\"2. Data Types: Series (homogeneous) vs DataFrame (heterogeneous per column)\")\n",
    "print(\"3. Indexing: Series (single index) vs DataFrame (row + column indices)\")\n",
    "print(\"4. Use Cases: Series (single variable) vs DataFrame (multiple variables)\")\n",
    "print(\"5. Memory: Series (lower overhead) vs DataFrame (higher overhead)\")\n",
    "\n",
    "# Memory usage comparison\n",
    "print(f\"\\nMemory Usage Comparison:\")\n",
    "print(f\"Temperature Series: {temperature_series.memory_usage(deep=True)} bytes\")\n",
    "print(f\"Employee DataFrame: {employee_df.memory_usage(deep=True).sum()} bytes\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76500b9d",
   "metadata": {},
   "source": [
    "### Q2. What is re-indexing in Pandas? Explain with the example.\n",
    "\n",
    "**Answer:**\n",
    "\n",
    "Re-indexing is a fundamental operation in pandas that involves changing the row or column labels (indices) of a DataFrame or Series. It is a powerful method for data alignment, restructuring, and ensuring consistent indices across different datasets.\n",
    "\n",
    "## Concept and Mathematical Foundation\n",
    "\n",
    "Re-indexing can be mathematically represented as a mapping function that transforms one index set to another:\n",
    "\n",
    "Let **I₁** = {i₁, i₂, ..., iₙ} be the original index set  \n",
    "Let **I₂** = {j₁, j₂, ..., jₘ} be the new desired index set  \n",
    "Let **D₁** be the original data structure with index **I₁**\n",
    "\n",
    "The re-indexing operation creates a new data structure **D₂** with index **I₂** such that:\n",
    "\n",
    "```\n",
    "D₂[jₖ] = {\n",
    "    D₁[jₖ]  if jₖ ∈ I₁ (index exists in original)\n",
    "    NaN     if jₖ ∉ I₁ (index does not exist in original)\n",
    "}\n",
    "```\n",
    "\n",
    "## Core Capabilities of Re-indexing\n",
    "\n",
    "### 1. **Data Rearrangement**\n",
    "Re-arrange existing data according to a new sequence of labels without changing the underlying values.\n",
    "\n",
    "### 2. **Index Expansion** \n",
    "Add new index labels that were not present in the original dataset. Missing values are filled with NaN by default.\n",
    "\n",
    "### 3. **Index Contraction**\n",
    "Remove existing labels by specifying a subset of the original indices.\n",
    "\n",
    "### 4. **Data Alignment**\n",
    "Ensure that multiple datasets have consistent indices for mathematical operations and joins.\n",
    "\n",
    "### 5. **Time Series Resampling**\n",
    "Particularly useful for time series data to change frequency or fill missing time periods.\n",
    "\n",
    "## Method Signature and Parameters\n",
    "\n",
    "The `reindex()` method has the following signature:\n",
    "```python\n",
    "DataFrame.reindex(labels=None, index=None, columns=None, axis=None, \n",
    "                  method=None, copy=True, level=None, fill_value=NaN, limit=None)\n",
    "```\n",
    "\n",
    "**Key Parameters:**\n",
    "- **labels/index**: New row indices\n",
    "- **columns**: New column indices  \n",
    "- **method**: Method for filling missing values ('ffill', 'bfill', 'nearest')\n",
    "- **fill_value**: Value to use for missing entries (default: NaN)\n",
    "- **copy**: Return a copy even if the new index is the same as the original\n",
    "\n",
    "## Practical Applications\n",
    "\n",
    "1. **Data Preprocessing**: Standardizing indices across multiple datasets\n",
    "2. **Time Series Analysis**: Creating regular time intervals\n",
    "3. **Data Cleaning**: Handling missing observations\n",
    "4. **Database Operations**: Simulating SQL-like joins and merges\n",
    "5. **Statistical Analysis**: Ensuring proper alignment for calculations\n",
    "\n",
    "The following examples demonstrate various re-indexing scenarios with detailed mathematical explanations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "66f363bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PANDAS RE-INDEXING: COMPREHENSIVE DEMONSTRATION\n",
      "============================================================\n",
      "\n",
      "1. BASIC RE-INDEXING OPERATIONS\n",
      "----------------------------------------\n",
      "Step 1: Creating Original DataFrame\n",
      "Original DataFrame D₁:\n",
      "    Sales  Profit  Expenses\n",
      "Q1   1000     200       800\n",
      "Q2   1500     300      1200\n",
      "Q3   1200     240       960\n",
      "Original Index I₁: ['Q1', 'Q2', 'Q3']\n",
      "Original Columns: ['Sales', 'Profit', 'Expenses']\n",
      "Shape: (3, 3)\n",
      "\n",
      "--------------------------------------------------\n",
      "\n",
      "2. ROW RE-INDEXING SCENARIOS\n",
      "----------------------------------------\n",
      "Scenario A: Reordering Existing Indices\n",
      "New Index Order I₂: ['Q3', 'Q1', 'Q2']\n",
      "Reordered DataFrame D₂:\n",
      "    Sales  Profit  Expenses\n",
      "Q3   1200     240       960\n",
      "Q1   1000     200       800\n",
      "Q2   1500     300      1200\n",
      "\n",
      "Mathematical Verification:\n",
      "  D₂[Q3] = D₁[Q3] = 1200 (Sales)\n",
      "  D₂[Q1] = D₁[Q1] = 1000 (Sales)\n",
      "  D₂[Q2] = D₁[Q2] = 1500 (Sales)\n",
      "\n",
      "------------------------------\n",
      "Scenario B: Index Expansion (Adding Q4)\n",
      "Expanded Index I₃: ['Q1', 'Q2', 'Q3', 'Q4']\n",
      "Expanded DataFrame D₃:\n",
      "     Sales  Profit  Expenses\n",
      "Q1  1000.0   200.0     800.0\n",
      "Q2  1500.0   300.0    1200.0\n",
      "Q3  1200.0   240.0     960.0\n",
      "Q4     NaN     NaN       NaN\n",
      "\n",
      "Mathematical Analysis:\n",
      "For existing indices: D₃[Qᵢ] = D₁[Qᵢ] where Qᵢ ∈ I₁\n",
      "For new indices: D₃[Q4] = NaN (since Q4 ∉ I₁)\n",
      "Missing values count: 3\n",
      "\n",
      "------------------------------\n",
      "Scenario C: Index Contraction (Selecting Subset)\n",
      "Subset Index I₄: ['Q1', 'Q3']\n",
      "Subset DataFrame D₄:\n",
      "    Sales  Profit  Expenses\n",
      "Q1   1000     200       800\n",
      "Q3   1200     240       960\n",
      "Original size: 3 rows\n",
      "Subset size: 2 rows\n",
      "Data reduction: 33.3%\n",
      "\n",
      "============================================================\n",
      "\n",
      "3. COLUMN RE-INDEXING SCENARIOS\n",
      "----------------------------------------\n",
      "Scenario A: Column Reordering\n",
      "New Column Order: ['Expenses', 'Sales', 'Profit']\n",
      "Column-Reordered DataFrame:\n",
      "    Expenses  Sales  Profit\n",
      "Q1       800   1000     200\n",
      "Q2      1200   1500     300\n",
      "Q3       960   1200     240\n",
      "\n",
      "------------------------------\n",
      "Scenario B: Adding New Columns\n",
      "Expanded Columns: ['Sales', 'Profit', 'Expenses', 'Revenue', 'Growth_Rate']\n",
      "Column-Expanded DataFrame:\n",
      "    Sales  Profit  Expenses  Revenue  Growth_Rate\n",
      "Q1   1000     200       800      NaN          NaN\n",
      "Q2   1500     300      1200      NaN          NaN\n",
      "Q3   1200     240       960      NaN          NaN\n",
      "New columns added: {'Revenue', 'Growth_Rate'}\n",
      "Missing values in new columns: 6\n",
      "\n",
      "============================================================\n",
      "\n",
      "4. ADVANCED RE-INDEXING TECHNIQUES\n",
      "----------------------------------------\n",
      "Technique A: Custom Fill Values\n",
      "Re-indexed with fill_value=0:\n",
      "    Sales  Profit  Expenses\n",
      "Q1   1000     200       800\n",
      "Q2   1500     300      1200\n",
      "Q3   1200     240       960\n",
      "Q4      0       0         0\n",
      "\n",
      "Comparison of fill strategies:\n",
      "Default (NaN):\n",
      "Sales      NaN\n",
      "Profit     NaN\n",
      "Expenses   NaN\n",
      "Name: Q4, dtype: float64\n",
      "Custom (Zero):\n",
      "Sales       0\n",
      "Profit      0\n",
      "Expenses    0\n",
      "Name: Q4, dtype: int64\n",
      "\n",
      "------------------------------\n",
      "Technique B: Forward Fill and Backward Fill\n",
      "Original time series with gaps:\n",
      "    Value\n",
      "T1   10.0\n",
      "T2    NaN\n",
      "T3   15.0\n",
      "T4    NaN\n",
      "T5   20.0\n",
      "\n",
      "Forward Fill Method:\n",
      "      Value\n",
      "T1     10.0\n",
      "T1.5   10.0\n",
      "T2      NaN\n",
      "T2.5    NaN\n",
      "T3     15.0\n",
      "T3.5   15.0\n",
      "T4      NaN\n",
      "T4.5    NaN\n",
      "T5     20.0\n",
      "\n",
      "Backward Fill Method:\n",
      "      Value\n",
      "T1     10.0\n",
      "T1.5    NaN\n",
      "T2      NaN\n",
      "T2.5   15.0\n",
      "T3     15.0\n",
      "T3.5    NaN\n",
      "T4      NaN\n",
      "T4.5   20.0\n",
      "T5     20.0\n",
      "\n",
      "============================================================\n",
      "\n",
      "5. PERFORMANCE AND MEMORY ANALYSIS\n",
      "----------------------------------------\n",
      "Memory Usage Analysis:\n",
      "Original DataFrame: 333 bytes\n",
      "Expanded DataFrame: 300 bytes\n",
      "Memory increase: -33 bytes\n",
      "Memory increase percentage: -9.91%\n",
      "\n",
      "Index Integrity Check:\n",
      "Original index is unique: True\n",
      "Expanded index is unique: True\n",
      "Original index is monotonic: True\n",
      "\n",
      "============================================================\n",
      "\n",
      "6. PRACTICAL USE CASES SUMMARY\n",
      "----------------------------------------\n",
      "Real-world applications of re-indexing:\n",
      "\n",
      "1. TIME SERIES ALIGNMENT:\n",
      "   - Standardizing different time frequencies\n",
      "   - Filling missing time periods\n",
      "   - Synchronizing multiple time series\n",
      "\n",
      "2. DATA INTEGRATION:\n",
      "   - Merging datasets with different indices\n",
      "   - Standardizing column orders across files\n",
      "   - Handling missing categories in categorical data\n",
      "\n",
      "3. STATISTICAL ANALYSIS:\n",
      "   - Ensuring proper alignment for calculations\n",
      "   - Creating balanced panels for analysis\n",
      "   - Preparing data for matrix operations\n",
      "\n",
      "4. DATABASE SIMULATION:\n",
      "   - Implementing LEFT/RIGHT JOIN operations\n",
      "   - Creating outer joins with missing data handling\n",
      "   - Standardizing database query results\n",
      "\n",
      "Mathematical Properties:\n",
      "- Re-indexing preserves data integrity where indices match\n",
      "- Operation is reversible if no data is lost\n",
      "- Memory complexity: O(n×m) where n=rows, m=columns\n",
      "- Time complexity: O(n) for index lookup and assignment\n"
     ]
    }
   ],
   "source": [
    "# Comprehensive Re-indexing Demonstration with Mathematical Analysis\n",
    "\n",
    "print(\"PANDAS RE-INDEXING: COMPREHENSIVE DEMONSTRATION\")\n",
    "print(\"=\" * 60)\n",
    "\n",
    "# ==========================================\n",
    "# PART 1: BASIC RE-INDEXING CONCEPTS\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n1. BASIC RE-INDEXING OPERATIONS\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Create original DataFrame with explicit structure\n",
    "print(\"Step 1: Creating Original DataFrame\")\n",
    "original_data = {\n",
    "    'Sales': [1000, 1500, 1200],\n",
    "    'Profit': [200, 300, 240],\n",
    "    'Expenses': [800, 1200, 960]\n",
    "}\n",
    "original_index = ['Q1', 'Q2', 'Q3']\n",
    "\n",
    "df_original = pd.DataFrame(original_data, index=original_index)\n",
    "\n",
    "print(\"Original DataFrame D₁:\")\n",
    "print(df_original)\n",
    "print(f\"Original Index I₁: {list(df_original.index)}\")\n",
    "print(f\"Original Columns: {list(df_original.columns)}\")\n",
    "print(f\"Shape: {df_original.shape}\")\n",
    "\n",
    "print(\"\\n\" + \"-\" * 50)\n",
    "\n",
    "# ==========================================\n",
    "# PART 2: ROW RE-INDEXING EXAMPLES\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n2. ROW RE-INDEXING SCENARIOS\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Scenario A: Reordering existing indices\n",
    "print(\"Scenario A: Reordering Existing Indices\")\n",
    "new_order = ['Q3', 'Q1', 'Q2']\n",
    "df_reordered = df_original.reindex(new_order)\n",
    "\n",
    "print(f\"New Index Order I₂: {new_order}\")\n",
    "print(\"Reordered DataFrame D₂:\")\n",
    "print(df_reordered)\n",
    "\n",
    "# Mathematical verification\n",
    "print(\"\\nMathematical Verification:\")\n",
    "for old_idx, new_idx in zip(original_index, new_order):\n",
    "    print(f\"  D₂[{new_idx}] = D₁[{new_idx}] = {df_original.loc[new_idx, 'Sales']} (Sales)\")\n",
    "\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "\n",
    "# Scenario B: Adding new indices (expansion)\n",
    "print(\"Scenario B: Index Expansion (Adding Q4)\")\n",
    "expanded_index = ['Q1', 'Q2', 'Q3', 'Q4']\n",
    "df_expanded = df_original.reindex(expanded_index)\n",
    "\n",
    "print(f\"Expanded Index I₃: {expanded_index}\")\n",
    "print(\"Expanded DataFrame D₃:\")\n",
    "print(df_expanded)\n",
    "\n",
    "print(\"\\nMathematical Analysis:\")\n",
    "print(\"For existing indices: D₃[Qᵢ] = D₁[Qᵢ] where Qᵢ ∈ I₁\")\n",
    "print(\"For new indices: D₃[Q4] = NaN (since Q4 ∉ I₁)\")\n",
    "print(f\"Missing values count: {df_expanded.isna().sum().sum()}\")\n",
    "\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "\n",
    "# Scenario C: Partial index selection (contraction)\n",
    "print(\"Scenario C: Index Contraction (Selecting Subset)\")\n",
    "subset_index = ['Q1', 'Q3']\n",
    "df_subset = df_original.reindex(subset_index)\n",
    "\n",
    "print(f\"Subset Index I₄: {subset_index}\")\n",
    "print(\"Subset DataFrame D₄:\")\n",
    "print(df_subset)\n",
    "\n",
    "print(f\"Original size: {df_original.shape[0]} rows\")\n",
    "print(f\"Subset size: {df_subset.shape[0]} rows\")\n",
    "print(f\"Data reduction: {((df_original.shape[0] - df_subset.shape[0])/df_original.shape[0]*100):.1f}%\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "\n",
    "# ==========================================\n",
    "# PART 3: COLUMN RE-INDEXING EXAMPLES\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n3. COLUMN RE-INDEXING SCENARIOS\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Scenario A: Reordering columns\n",
    "print(\"Scenario A: Column Reordering\")\n",
    "new_col_order = ['Expenses', 'Sales', 'Profit']\n",
    "df_col_reorder = df_original.reindex(columns=new_col_order)\n",
    "\n",
    "print(f\"New Column Order: {new_col_order}\")\n",
    "print(\"Column-Reordered DataFrame:\")\n",
    "print(df_col_reorder)\n",
    "\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "\n",
    "# Scenario B: Adding new columns\n",
    "print(\"Scenario B: Adding New Columns\")\n",
    "expanded_columns = ['Sales', 'Profit', 'Expenses', 'Revenue', 'Growth_Rate']\n",
    "df_col_expanded = df_original.reindex(columns=expanded_columns)\n",
    "\n",
    "print(f\"Expanded Columns: {expanded_columns}\")\n",
    "print(\"Column-Expanded DataFrame:\")\n",
    "print(df_col_expanded)\n",
    "\n",
    "print(f\"New columns added: {set(expanded_columns) - set(df_original.columns)}\")\n",
    "print(f\"Missing values in new columns: {df_col_expanded[['Revenue', 'Growth_Rate']].isna().sum().sum()}\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "\n",
    "# ==========================================\n",
    "# PART 4: ADVANCED RE-INDEXING TECHNIQUES\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n4. ADVANCED RE-INDEXING TECHNIQUES\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Fill value specification\n",
    "print(\"Technique A: Custom Fill Values\")\n",
    "df_fill_zero = df_original.reindex(['Q1', 'Q2', 'Q3', 'Q4'], fill_value=0)\n",
    "\n",
    "print(\"Re-indexed with fill_value=0:\")\n",
    "print(df_fill_zero)\n",
    "\n",
    "print(\"\\nComparison of fill strategies:\")\n",
    "df_fill_nan = df_original.reindex(['Q1', 'Q2', 'Q3', 'Q4'])  # Default NaN\n",
    "print(\"Default (NaN):\")\n",
    "print(df_fill_nan.loc['Q4'])\n",
    "print(\"Custom (Zero):\")\n",
    "print(df_fill_zero.loc['Q4'])\n",
    "\n",
    "print(\"\\n\" + \"-\" * 30)\n",
    "\n",
    "# Forward fill and backward fill\n",
    "print(\"Technique B: Forward Fill and Backward Fill\")\n",
    "\n",
    "# Create a DataFrame with some missing data first\n",
    "time_data = pd.DataFrame({\n",
    "    'Value': [10, None, 15, None, 20]\n",
    "}, index=['T1', 'T2', 'T3', 'T4', 'T5'])\n",
    "\n",
    "print(\"Original time series with gaps:\")\n",
    "print(time_data)\n",
    "\n",
    "# Reindex with method parameters\n",
    "full_time_index = ['T1', 'T1.5', 'T2', 'T2.5', 'T3', 'T3.5', 'T4', 'T4.5', 'T5']\n",
    "\n",
    "# Forward fill\n",
    "df_ffill = time_data.reindex(full_time_index, method='ffill')\n",
    "print(f\"\\nForward Fill Method:\")\n",
    "print(df_ffill)\n",
    "\n",
    "# Backward fill\n",
    "df_bfill = time_data.reindex(full_time_index, method='bfill')\n",
    "print(f\"\\nBackward Fill Method:\")\n",
    "print(df_bfill)\n",
    "\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "\n",
    "# ==========================================\n",
    "# PART 5: PERFORMANCE AND MEMORY ANALYSIS\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n5. PERFORMANCE AND MEMORY ANALYSIS\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Memory usage comparison\n",
    "original_memory = df_original.memory_usage(deep=True).sum()\n",
    "expanded_memory = df_expanded.memory_usage(deep=True).sum()\n",
    "\n",
    "print(\"Memory Usage Analysis:\")\n",
    "print(f\"Original DataFrame: {original_memory} bytes\")\n",
    "print(f\"Expanded DataFrame: {expanded_memory} bytes\")\n",
    "print(f\"Memory increase: {expanded_memory - original_memory} bytes\")\n",
    "print(f\"Memory increase percentage: {((expanded_memory/original_memory - 1) * 100):.2f}%\")\n",
    "\n",
    "# Index integrity check\n",
    "print(f\"\\nIndex Integrity Check:\")\n",
    "print(f\"Original index is unique: {df_original.index.is_unique}\")\n",
    "print(f\"Expanded index is unique: {df_expanded.index.is_unique}\")\n",
    "print(f\"Original index is monotonic: {df_original.index.is_monotonic_increasing}\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 60)\n",
    "\n",
    "# ==========================================\n",
    "# PART 6: PRACTICAL USE CASES\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n6. PRACTICAL USE CASES SUMMARY\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "print(\"Real-world applications of re-indexing:\")\n",
    "print(\"\\n1. TIME SERIES ALIGNMENT:\")\n",
    "print(\"   - Standardizing different time frequencies\")\n",
    "print(\"   - Filling missing time periods\")\n",
    "print(\"   - Synchronizing multiple time series\")\n",
    "\n",
    "print(\"\\n2. DATA INTEGRATION:\")\n",
    "print(\"   - Merging datasets with different indices\")\n",
    "print(\"   - Standardizing column orders across files\")\n",
    "print(\"   - Handling missing categories in categorical data\")\n",
    "\n",
    "print(\"\\n3. STATISTICAL ANALYSIS:\")\n",
    "print(\"   - Ensuring proper alignment for calculations\")\n",
    "print(\"   - Creating balanced panels for analysis\")\n",
    "print(\"   - Preparing data for matrix operations\")\n",
    "\n",
    "print(\"\\n4. DATABASE SIMULATION:\")\n",
    "print(\"   - Implementing LEFT/RIGHT JOIN operations\")\n",
    "print(\"   - Creating outer joins with missing data handling\")\n",
    "print(\"   - Standardizing database query results\")\n",
    "\n",
    "print(\"\\nMathematical Properties:\")\n",
    "print(\"- Re-indexing preserves data integrity where indices match\")\n",
    "print(\"- Operation is reversible if no data is lost\")\n",
    "print(\"- Memory complexity: O(n×m) where n=rows, m=columns\")\n",
    "print(\"- Time complexity: O(n) for index lookup and assignment\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22618691",
   "metadata": {},
   "source": [
    "### Q3. Take a sample data and provide with the output how to compute the mean, median, standard deviation, quantile in pandas?\n",
    "\n",
    "**Answer:**\n",
    "\n",
    "Statistical measures are fundamental tools for understanding and summarizing data distributions. These measures provide insights into central tendency, dispersion, and distribution characteristics. This section demonstrates the computation of four essential statistical measures using pandas, along with their mathematical foundations and interpretations.\n",
    "\n",
    "## Theoretical Foundation\n",
    "\n",
    "### 1. **Mean (Arithmetic Average)**\n",
    "The mean represents the central tendency of a dataset and is calculated as the sum of all values divided by the number of observations.\n",
    "\n",
    "**Mathematical Formula:**\n",
    "```\n",
    "μ = (Σᵢ₌₁ⁿ xᵢ) / n\n",
    "```\n",
    "Where:\n",
    "- μ (mu) = population mean\n",
    "- xᵢ = individual values\n",
    "- n = total number of observations\n",
    "- Σ = summation symbol\n",
    "\n",
    "**Pandas Implementation:** `Series.mean()` or `DataFrame.mean()`\n",
    "\n",
    "### 2. **Median (Middle Value)**\n",
    "The median is the middle value when data is arranged in ascending order. It is less sensitive to outliers than the mean.\n",
    "\n",
    "**Mathematical Definition:**\n",
    "For a sorted dataset of size n:\n",
    "```\n",
    "Median = {\n",
    "    x₍ₙ₊₁₎/₂         if n is odd\n",
    "    (x₍ₙ/₂₎ + x₍ₙ/₂₊₁₎)/2  if n is even\n",
    "}\n",
    "```\n",
    "\n",
    "**Pandas Implementation:** `Series.median()` or `DataFrame.median()`\n",
    "\n",
    "### 3. **Standard Deviation (Measure of Spread)**\n",
    "Standard deviation quantifies the amount of variation or dispersion in a dataset relative to the mean.\n",
    "\n",
    "**Mathematical Formulas:**\n",
    "\n",
    "**Population Standard Deviation:**\n",
    "```\n",
    "σ = √[(Σᵢ₌₁ⁿ (xᵢ - μ)²) / n]\n",
    "```\n",
    "\n",
    "**Sample Standard Deviation:**\n",
    "```\n",
    "s = √[(Σᵢ₌₁ⁿ (xᵢ - x̄)²) / (n-1)]\n",
    "```\n",
    "\n",
    "Where:\n",
    "- σ (sigma) = population standard deviation\n",
    "- s = sample standard deviation  \n",
    "- x̄ = sample mean\n",
    "- (n-1) = degrees of freedom (Bessel's correction)\n",
    "\n",
    "**Pandas Implementation:** `Series.std()` (default uses sample std dev with ddof=1)\n",
    "\n",
    "### 4. **Quantiles (Percentiles)**\n",
    "Quantiles divide a dataset into equal-sized intervals. Common quantiles include quartiles (25%, 50%, 75%) and percentiles.\n",
    "\n",
    "**Mathematical Definition:**\n",
    "For the pth percentile (where 0 ≤ p ≤ 1):\n",
    "1. Sort the data in ascending order\n",
    "2. Calculate position: k = p × (n-1)\n",
    "3. If k is integer: percentile = xₖ\n",
    "4. If k is not integer: interpolate between x⌊k⌋ and x⌈k⌉\n",
    "\n",
    "**Pandas Implementation:** `Series.quantile(q)` where q is between 0 and 1\n",
    "\n",
    "## Practical Importance\n",
    "\n",
    "1. **Mean**: Useful for symmetric distributions, sensitive to outliers\n",
    "2. **Median**: Robust to outliers, better for skewed distributions  \n",
    "3. **Standard Deviation**: Indicates data volatility and consistency\n",
    "4. **Quantiles**: Provide distribution shape and identify outliers\n",
    "\n",
    "The following comprehensive example demonstrates these calculations with detailed mathematical verification:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0c85c52d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "STATISTICAL MEASURES: COMPREHENSIVE COMPUTATION AND ANALYSIS\n",
      "======================================================================\n",
      "\n",
      "1. DATASET CREATION AND INITIAL EXPLORATION\n",
      "--------------------------------------------------\n",
      "Student Performance Dataset:\n",
      "  Student_ID  Mathematics  Science  English  Physics\n",
      "0     STU001           85       88       76       90\n",
      "1     STU002           92       85       89       87\n",
      "2     STU003           78       92       82       85\n",
      "3     STU004           96       89       91       93\n",
      "4     STU005           87       86       85       89\n",
      "5     STU006           91       93       88       92\n",
      "6     STU007           83       87       79       86\n",
      "7     STU008           89       90       86       91\n",
      "8     STU009           94       95       93       96\n",
      "9     STU010           88       84       87       88\n",
      "\n",
      "Dataset Shape: (20, 5)\n",
      "Number of Students: 20\n",
      "Number of Subjects: 4\n",
      "\n",
      "Numerical Data Overview:\n",
      "   Mathematics  Science  English  Physics\n",
      "0           85       88       76       90\n",
      "1           92       85       89       87\n",
      "2           78       92       82       85\n",
      "3           96       89       91       93\n",
      "4           87       86       85       89\n",
      "\n",
      "======================================================================\n",
      "\n",
      "2. MEAN (ARITHMETIC AVERAGE) - DETAILED CALCULATION\n",
      "--------------------------------------------------\n",
      "2.1 Pandas Built-in Mean Calculation\n",
      "------------------------------\n",
      "Subject-wise Mean Scores:\n",
      "  Mathematics: 87.3000\n",
      "  Science: 89.0000\n",
      "  English: 86.8000\n",
      "  Physics: 89.8000\n",
      "\n",
      "Overall Mean (across all subjects): 88.2250\n",
      "\n",
      "2.2 Manual Mean Calculation with Mathematical Verification\n",
      "------------------------------\n",
      "Mathematics Scores: [85 92 78 96 87 91 83 89 94 88 76 95 82 90 86 93 79 84 97 81]\n",
      "Number of students (n): 20\n",
      "\n",
      "Step-by-step calculation:\n",
      "Σxᵢ = 85 + 92 + 78 + 96 + 87 + 91 + 83 + 89 + 94 + 88 + 76 + 95 + 82 + 90 + 86 + 93 + 79 + 84 + 97 + 81 = 1746\n",
      "μ = Σxᵢ/n = 1746/20 = 87.3000\n",
      "Pandas mean(): 87.3000\n",
      "Verification: Manual = Pandas? True\n",
      "\n",
      "2.3 Statistical Interpretation\n",
      "------------------------------\n",
      "The mean represents the expected value of the distribution.\n",
      "On average, students scored 87.3 points in Mathematics.\n",
      "This suggests above average performance.\n",
      "\n",
      "======================================================================\n",
      "\n",
      "3. MEDIAN (MIDDLE VALUE) - DETAILED CALCULATION\n",
      "--------------------------------------------------\n",
      "3.1 Pandas Built-in Median Calculation\n",
      "------------------------------\n",
      "Subject-wise Median Scores:\n",
      "  Mathematics: 87.5000\n",
      "  Science: 88.5000\n",
      "  English: 87.5000\n",
      "  Physics: 89.5000\n",
      "\n",
      "3.2 Manual Median Calculation with Mathematical Verification\n",
      "------------------------------\n",
      "Sorted Mathematics Scores: [np.int64(76), np.int64(78), np.int64(79), np.int64(81), np.int64(82), np.int64(83), np.int64(84), np.int64(85), np.int64(86), np.int64(87), np.int64(88), np.int64(89), np.int64(90), np.int64(91), np.int64(92), np.int64(93), np.int64(94), np.int64(95), np.int64(96), np.int64(97)]\n",
      "Number of values (n): 20\n",
      "\n",
      "Even number of values:\n",
      "Middle positions: 10 and 11\n",
      "Values: 87 and 88\n",
      "Median = (87 + 88)/2 = 87.5\n",
      "Pandas median(): 87.5000\n",
      "Verification: Manual = Pandas? True\n",
      "\n",
      "3.3 Mean vs Median Comparison\n",
      "------------------------------\n",
      "Mathematics:\n",
      "  Mean: 87.30, Median: 87.50\n",
      "  Distribution: Left-skewed\n",
      "Science:\n",
      "  Mean: 89.00, Median: 88.50\n",
      "  Distribution: Right-skewed\n",
      "English:\n",
      "  Mean: 86.80, Median: 87.50\n",
      "  Distribution: Left-skewed\n",
      "Physics:\n",
      "  Mean: 89.80, Median: 89.50\n",
      "  Distribution: Right-skewed\n",
      "\n",
      "======================================================================\n",
      "\n",
      "4. STANDARD DEVIATION - DETAILED CALCULATION\n",
      "--------------------------------------------------\n",
      "4.1 Pandas Built-in Standard Deviation\n",
      "------------------------------\n",
      "Sample Standard Deviation (ddof=1):\n",
      "  Mathematics: 6.2416\n",
      "  Science: 3.7697\n",
      "  English: 5.1360\n",
      "  Physics: 3.9550\n",
      "\n",
      "Population Standard Deviation (ddof=0):\n",
      "  Mathematics: 6.0836\n",
      "  Science: 3.6742\n",
      "  English: 5.0060\n",
      "  Physics: 3.8549\n",
      "\n",
      "4.2 Manual Standard Deviation Calculation\n",
      "------------------------------\n",
      "Mathematics scores: [85 92 78 96 87 91 83 89 94 88 76 95 82 90 86 93 79 84 97 81]\n",
      "Mean (x̄): 87.3000\n",
      "\n",
      "Deviations from mean (xᵢ - x̄):\n",
      "  Student 1: 85 - 87.3000 = -2.3000\n",
      "  Student 2: 92 - 87.3000 = 4.7000\n",
      "  Student 3: 78 - 87.3000 = -9.3000\n",
      "  Student 4: 96 - 87.3000 = 8.7000\n",
      "  Student 5: 87 - 87.3000 = -0.3000\n",
      "  Student 6: 91 - 87.3000 = 3.7000\n",
      "  Student 7: 83 - 87.3000 = -4.3000\n",
      "  Student 8: 89 - 87.3000 = 1.7000\n",
      "  Student 9: 94 - 87.3000 = 6.7000\n",
      "  Student 10: 88 - 87.3000 = 0.7000\n",
      "  Student 11: 76 - 87.3000 = -11.3000\n",
      "  Student 12: 95 - 87.3000 = 7.7000\n",
      "  Student 13: 82 - 87.3000 = -5.3000\n",
      "  Student 14: 90 - 87.3000 = 2.7000\n",
      "  Student 15: 86 - 87.3000 = -1.3000\n",
      "  Student 16: 93 - 87.3000 = 5.7000\n",
      "  Student 17: 79 - 87.3000 = -8.3000\n",
      "  Student 18: 84 - 87.3000 = -3.3000\n",
      "  Student 19: 97 - 87.3000 = 9.7000\n",
      "  Student 20: 81 - 87.3000 = -6.3000\n",
      "\n",
      "Squared deviations (xᵢ - x̄)²:\n",
      "  Student 1: (-2.3000)² = 5.2900\n",
      "  Student 2: (4.7000)² = 22.0900\n",
      "  Student 3: (-9.3000)² = 86.4900\n",
      "  Student 4: (8.7000)² = 75.6900\n",
      "  Student 5: (-0.3000)² = 0.0900\n",
      "  Student 6: (3.7000)² = 13.6900\n",
      "  Student 7: (-4.3000)² = 18.4900\n",
      "  Student 8: (1.7000)² = 2.8900\n",
      "  Student 9: (6.7000)² = 44.8900\n",
      "  Student 10: (0.7000)² = 0.4900\n",
      "  Student 11: (-11.3000)² = 127.6900\n",
      "  Student 12: (7.7000)² = 59.2900\n",
      "  Student 13: (-5.3000)² = 28.0900\n",
      "  Student 14: (2.7000)² = 7.2900\n",
      "  Student 15: (-1.3000)² = 1.6900\n",
      "  Student 16: (5.7000)² = 32.4900\n",
      "  Student 17: (-8.3000)² = 68.8900\n",
      "  Student 18: (-3.3000)² = 10.8900\n",
      "  Student 19: (9.7000)² = 94.0900\n",
      "  Student 20: (-6.3000)² = 39.6900\n",
      "\n",
      "Sample Variance Calculation:\n",
      "Σ(xᵢ - x̄)² = 740.2000\n",
      "s² = Σ(xᵢ - x̄)²/(n-1) = 740.2000/19 = 38.9579\n",
      "s = √(s²) = √38.9579 = 6.2416\n",
      "\n",
      "Pandas std(): 6.2416\n",
      "Verification: Manual = Pandas? True\n",
      "\n",
      "4.3 Standard Deviation Interpretation\n",
      "------------------------------\n",
      "Mathematics:\n",
      "  Mean: 87.30, Std Dev: 6.24\n",
      "  Coefficient of Variation: 7.15%\n",
      "  Interpretation: Low variability\n",
      "Science:\n",
      "  Mean: 89.00, Std Dev: 3.77\n",
      "  Coefficient of Variation: 4.24%\n",
      "  Interpretation: Low variability\n",
      "English:\n",
      "  Mean: 86.80, Std Dev: 5.14\n",
      "  Coefficient of Variation: 5.92%\n",
      "  Interpretation: Low variability\n",
      "Physics:\n",
      "  Mean: 89.80, Std Dev: 3.96\n",
      "  Coefficient of Variation: 4.40%\n",
      "  Interpretation: Low variability\n",
      "\n",
      "======================================================================\n",
      "\n",
      "5. QUANTILES (PERCENTILES) - DETAILED CALCULATION\n",
      "--------------------------------------------------\n",
      "5.1 Pandas Built-in Quantile Calculation\n",
      "------------------------------\n",
      "Subject-wise Quantiles:\n",
      "\n",
      "Mathematics:\n",
      "  Q1 (25th percentile): 82.7500\n",
      "  Q2 (50th percentile/Median): 87.5000\n",
      "  Q3 (75th percentile): 92.2500\n",
      "\n",
      "Science:\n",
      "  Q1 (25th percentile): 86.0000\n",
      "  Q2 (50th percentile/Median): 88.5000\n",
      "  Q3 (75th percentile): 92.0000\n",
      "\n",
      "English:\n",
      "  Q1 (25th percentile): 83.7500\n",
      "  Q2 (50th percentile/Median): 87.5000\n",
      "  Q3 (75th percentile): 90.2500\n",
      "\n",
      "Physics:\n",
      "  Q1 (25th percentile): 86.7500\n",
      "  Q2 (50th percentile/Median): 89.5000\n",
      "  Q3 (75th percentile): 92.2500\n",
      "\n",
      "5.2 Manual Quantile Calculation\n",
      "------------------------------\n",
      "Mathematics scores (sorted): [np.int64(76), np.int64(78), np.int64(79), np.int64(81), np.int64(82), np.int64(83), np.int64(84), np.int64(85), np.int64(86), np.int64(87), np.int64(88), np.int64(89), np.int64(90), np.int64(91), np.int64(92), np.int64(93), np.int64(94), np.int64(95), np.int64(96), np.int64(97)]\n",
      "Number of values (n): 20\n",
      "\n",
      "Q1 Position Calculation:\n",
      "Position = p × (n-1) = 0.25 × (20-1) = 0.25 × 19 = 4.75\n",
      "Position requires interpolation:\n",
      "Lower index: 5, Value: 82\n",
      "Upper index: 6, Value: 83\n",
      "Fraction: 0.7500\n",
      "Q1 = 82 + 0.7500 × (83 - 82) = 82.7500\n",
      "\n",
      "Pandas quantile(0.25): 82.7500\n",
      "Verification: |Manual - Pandas| = 0.0000\n",
      "\n",
      "5.3 Quartile Analysis and Interpretation\n",
      "------------------------------\n",
      "\n",
      "Mathematics Quartile Analysis:\n",
      "  Q1 (25%): 82.75 - 25% of students scored below this\n",
      "  Q2 (50%): 87.50 - Median score\n",
      "  Q3 (75%): 92.25 - 75% of students scored below this\n",
      "  IQR: 9.50 - Middle 50% of scores span this range\n",
      "  Outlier boundaries: [68.50, 106.50]\n",
      "  Outliers detected: 0 (None)\n",
      "\n",
      "Science Quartile Analysis:\n",
      "  Q1 (25%): 86.00 - 25% of students scored below this\n",
      "  Q2 (50%): 88.50 - Median score\n",
      "  Q3 (75%): 92.00 - 75% of students scored below this\n",
      "  IQR: 6.00 - Middle 50% of scores span this range\n",
      "  Outlier boundaries: [77.00, 101.00]\n",
      "  Outliers detected: 0 (None)\n",
      "\n",
      "English Quartile Analysis:\n",
      "  Q1 (25%): 83.75 - 25% of students scored below this\n",
      "  Q2 (50%): 87.50 - Median score\n",
      "  Q3 (75%): 90.25 - 75% of students scored below this\n",
      "  IQR: 6.50 - Middle 50% of scores span this range\n",
      "  Outlier boundaries: [74.00, 100.00]\n",
      "  Outliers detected: 0 (None)\n",
      "\n",
      "Physics Quartile Analysis:\n",
      "  Q1 (25%): 86.75 - 25% of students scored below this\n",
      "  Q2 (50%): 89.50 - Median score\n",
      "  Q3 (75%): 92.25 - 75% of students scored below this\n",
      "  IQR: 5.50 - Middle 50% of scores span this range\n",
      "  Outlier boundaries: [78.50, 100.50]\n",
      "  Outliers detected: 0 (None)\n",
      "\n",
      "======================================================================\n",
      "\n",
      "6. COMPREHENSIVE STATISTICAL SUMMARY\n",
      "--------------------------------------------------\n",
      "Complete Statistical Summary:\n",
      "       Mathematics    Science    English   Physics\n",
      "count    20.000000  20.000000  20.000000  20.00000\n",
      "mean     87.300000  89.000000  86.800000  89.80000\n",
      "std       6.241626   3.769685   5.136044   3.95501\n",
      "min      76.000000  83.000000  76.000000  84.00000\n",
      "25%      82.750000  86.000000  83.750000  86.75000\n",
      "50%      87.500000  88.500000  87.500000  89.50000\n",
      "75%      92.250000  92.000000  90.250000  92.25000\n",
      "max      97.000000  96.000000  95.000000  98.00000\n",
      "\n",
      "6.1 Custom Summary Statistics\n",
      "------------------------------\n",
      "             Count  Mean  Median  Mode  Std_Dev  Variance  Skewness  Kurtosis  \\\n",
      "Mathematics     20  87.3    87.5  76.0   6.2416   38.9579   -0.1575   -1.0027   \n",
      "Science         20  89.0    88.5  85.0   3.7697   14.2105    0.2947   -0.8970   \n",
      "English         20  86.8    87.5  85.0   5.1360   26.3789   -0.3510   -0.4091   \n",
      "Physics         20  89.8    89.5  85.0   3.9550   15.6421    0.4485   -0.6109   \n",
      "\n",
      "             Range  IQR  \n",
      "Mathematics     21  9.5  \n",
      "Science         13  6.0  \n",
      "English         19  6.5  \n",
      "Physics         14  5.5  \n",
      "\n",
      "6.2 Key Statistical Insights\n",
      "------------------------------\n",
      "\n",
      "Mathematics Insights:\n",
      "  Central Tendency: Mean=87.3, Median=87.5\n",
      "  Variability: Std Dev=6.24 (High variation)\n",
      "  Distribution Shape: Symmetric\n",
      "  Performance Level: Good\n",
      "\n",
      "Science Insights:\n",
      "  Central Tendency: Mean=89.0, Median=88.5\n",
      "  Variability: Std Dev=3.77 (Low variation)\n",
      "  Distribution Shape: Symmetric\n",
      "  Performance Level: Good\n",
      "\n",
      "English Insights:\n",
      "  Central Tendency: Mean=86.8, Median=87.5\n",
      "  Variability: Std Dev=5.14 (Moderate variation)\n",
      "  Distribution Shape: Symmetric\n",
      "  Performance Level: Good\n",
      "\n",
      "Physics Insights:\n",
      "  Central Tendency: Mean=89.8, Median=89.5\n",
      "  Variability: Std Dev=3.96 (Low variation)\n",
      "  Distribution Shape: Symmetric\n",
      "  Performance Level: Good\n",
      "\n",
      "======================================================================\n",
      "STATISTICAL COMPUTATION COMPLETED SUCCESSFULLY\n",
      "All calculations verified against pandas built-in functions\n",
      "======================================================================\n"
     ]
    }
   ],
   "source": [
    "# Comprehensive Statistical Measures Computation and Analysis\n",
    "\n",
    "print(\"STATISTICAL MEASURES: COMPREHENSIVE COMPUTATION AND ANALYSIS\")\n",
    "print(\"=\" * 70)\n",
    "\n",
    "# ==========================================\n",
    "# PART 1: DATASET CREATION AND EXPLORATION\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n1. DATASET CREATION AND INITIAL EXPLORATION\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "# Create a comprehensive student performance dataset\n",
    "import numpy as np\n",
    "\n",
    "# Set random seed for reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "# Generate realistic student data\n",
    "student_data = {\n",
    "    'Student_ID': [f'STU{i:03d}' for i in range(1, 21)],\n",
    "    'Mathematics': [85, 92, 78, 96, 87, 91, 83, 89, 94, 88,\n",
    "                   76, 95, 82, 90, 86, 93, 79, 84, 97, 81],\n",
    "    'Science': [88, 85, 92, 89, 86, 93, 87, 90, 95, 84,\n",
    "               91, 83, 94, 88, 92, 86, 89, 87, 96, 85],\n",
    "    'English': [76, 89, 82, 91, 85, 88, 79, 86, 93, 87,\n",
    "               84, 92, 80, 94, 88, 90, 83, 85, 95, 89],\n",
    "    'Physics': [90, 87, 85, 93, 89, 92, 86, 91, 96, 88,\n",
    "               84, 94, 87, 91, 90, 95, 85, 89, 98, 86]\n",
    "}\n",
    "\n",
    "# Create DataFrame\n",
    "scores_df = pd.DataFrame(student_data)\n",
    "\n",
    "print(\"Student Performance Dataset:\")\n",
    "print(scores_df.head(10))\n",
    "print(f\"\\nDataset Shape: {scores_df.shape}\")\n",
    "print(f\"Number of Students: {scores_df.shape[0]}\")\n",
    "print(f\"Number of Subjects: {scores_df.shape[1] - 1}\")  # Excluding Student_ID\n",
    "\n",
    "# Extract numerical columns for analysis\n",
    "numerical_columns = ['Mathematics', 'Science', 'English', 'Physics']\n",
    "scores_only = scores_df[numerical_columns]\n",
    "\n",
    "print(f\"\\nNumerical Data Overview:\")\n",
    "print(scores_only.head())\n",
    "\n",
    "print(\"\\n\" + \"=\" * 70)\n",
    "\n",
    "# ==========================================\n",
    "# PART 2: MEAN CALCULATION AND ANALYSIS\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n2. MEAN (ARITHMETIC AVERAGE) - DETAILED CALCULATION\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "print(\"2.1 Pandas Built-in Mean Calculation\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Calculate means using pandas\n",
    "subject_means = scores_only.mean()\n",
    "print(\"Subject-wise Mean Scores:\")\n",
    "for subject, mean_score in subject_means.items():\n",
    "    print(f\"  {subject}: {mean_score:.4f}\")\n",
    "\n",
    "overall_mean = scores_only.mean().mean()\n",
    "print(f\"\\nOverall Mean (across all subjects): {overall_mean:.4f}\")\n",
    "\n",
    "print(\"\\n2.2 Manual Mean Calculation with Mathematical Verification\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Manual calculation for Mathematics\n",
    "math_scores = scores_only['Mathematics'].values\n",
    "n_students = len(math_scores)\n",
    "\n",
    "print(f\"Mathematics Scores: {math_scores}\")\n",
    "print(f\"Number of students (n): {n_students}\")\n",
    "\n",
    "# Step-by-step calculation\n",
    "sum_scores = sum(math_scores)\n",
    "manual_mean = sum_scores / n_students\n",
    "\n",
    "print(f\"\\nStep-by-step calculation:\")\n",
    "print(f\"Σxᵢ = {' + '.join(map(str, math_scores))} = {sum_scores}\")\n",
    "print(f\"μ = Σxᵢ/n = {sum_scores}/{n_students} = {manual_mean:.4f}\")\n",
    "print(f\"Pandas mean(): {scores_only['Mathematics'].mean():.4f}\")\n",
    "print(f\"Verification: Manual = Pandas? {abs(manual_mean - scores_only['Mathematics'].mean()) < 1e-10}\")\n",
    "\n",
    "print(\"\\n2.3 Statistical Interpretation\")\n",
    "print(\"-\" * 30)\n",
    "print(\"The mean represents the expected value of the distribution.\")\n",
    "print(f\"On average, students scored {manual_mean:.1f} points in Mathematics.\")\n",
    "print(f\"This suggests {'above average' if manual_mean > 85 else 'average' if manual_mean >= 80 else 'below average'} performance.\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 70)\n",
    "\n",
    "# ==========================================\n",
    "# PART 3: MEDIAN CALCULATION AND ANALYSIS\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n3. MEDIAN (MIDDLE VALUE) - DETAILED CALCULATION\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "print(\"3.1 Pandas Built-in Median Calculation\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "subject_medians = scores_only.median()\n",
    "print(\"Subject-wise Median Scores:\")\n",
    "for subject, median_score in subject_medians.items():\n",
    "    print(f\"  {subject}: {median_score:.4f}\")\n",
    "\n",
    "print(\"\\n3.2 Manual Median Calculation with Mathematical Verification\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Manual calculation for Mathematics\n",
    "math_sorted = sorted(math_scores)\n",
    "print(f\"Sorted Mathematics Scores: {math_sorted}\")\n",
    "print(f\"Number of values (n): {n_students}\")\n",
    "\n",
    "if n_students % 2 == 1:\n",
    "    # Odd number of values\n",
    "    middle_index = n_students // 2\n",
    "    manual_median = math_sorted[middle_index]\n",
    "    print(f\"\\nOdd number of values:\")\n",
    "    print(f\"Middle position: ({n_students}+1)/2 = {(n_students+1)//2}\")\n",
    "    print(f\"Median = x₍{middle_index+1}₎ = {manual_median}\")\n",
    "else:\n",
    "    # Even number of values\n",
    "    middle1 = n_students // 2 - 1\n",
    "    middle2 = n_students // 2\n",
    "    manual_median = (math_sorted[middle1] + math_sorted[middle2]) / 2\n",
    "    print(f\"\\nEven number of values:\")\n",
    "    print(f\"Middle positions: {middle1+1} and {middle2+1}\")\n",
    "    print(f\"Values: {math_sorted[middle1]} and {math_sorted[middle2]}\")\n",
    "    print(f\"Median = ({math_sorted[middle1]} + {math_sorted[middle2]})/2 = {manual_median}\")\n",
    "\n",
    "print(f\"Pandas median(): {scores_only['Mathematics'].median():.4f}\")\n",
    "print(f\"Verification: Manual = Pandas? {abs(manual_median - scores_only['Mathematics'].median()) < 1e-10}\")\n",
    "\n",
    "print(\"\\n3.3 Mean vs Median Comparison\")\n",
    "print(\"-\" * 30)\n",
    "for subject in numerical_columns:\n",
    "    mean_val = scores_only[subject].mean()\n",
    "    median_val = scores_only[subject].median()\n",
    "    skew_indicator = \"Right-skewed\" if mean_val > median_val else \"Left-skewed\" if mean_val < median_val else \"Symmetric\"\n",
    "    print(f\"{subject}:\")\n",
    "    print(f\"  Mean: {mean_val:.2f}, Median: {median_val:.2f}\")\n",
    "    print(f\"  Distribution: {skew_indicator}\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 70)\n",
    "\n",
    "# ==========================================\n",
    "# PART 4: STANDARD DEVIATION CALCULATION\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n4. STANDARD DEVIATION - DETAILED CALCULATION\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "print(\"4.1 Pandas Built-in Standard Deviation\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "subject_std = scores_only.std()  # Sample standard deviation (ddof=1)\n",
    "subject_std_pop = scores_only.std(ddof=0)  # Population standard deviation\n",
    "\n",
    "print(\"Sample Standard Deviation (ddof=1):\")\n",
    "for subject, std_score in subject_std.items():\n",
    "    print(f\"  {subject}: {std_score:.4f}\")\n",
    "\n",
    "print(\"\\nPopulation Standard Deviation (ddof=0):\")\n",
    "for subject, std_score in subject_std_pop.items():\n",
    "    print(f\"  {subject}: {std_score:.4f}\")\n",
    "\n",
    "print(\"\\n4.2 Manual Standard Deviation Calculation\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Manual calculation for Mathematics (Sample Standard Deviation)\n",
    "math_mean = scores_only['Mathematics'].mean()\n",
    "print(f\"Mathematics scores: {math_scores}\")\n",
    "print(f\"Mean (x̄): {math_mean:.4f}\")\n",
    "\n",
    "# Calculate deviations from mean\n",
    "deviations = math_scores - math_mean\n",
    "print(f\"\\nDeviations from mean (xᵢ - x̄):\")\n",
    "for i, (score, dev) in enumerate(zip(math_scores, deviations)):\n",
    "    print(f\"  Student {i+1}: {score} - {math_mean:.4f} = {dev:.4f}\")\n",
    "\n",
    "# Calculate squared deviations\n",
    "squared_deviations = deviations ** 2\n",
    "print(f\"\\nSquared deviations (xᵢ - x̄)²:\")\n",
    "for i, (dev, sq_dev) in enumerate(zip(deviations, squared_deviations)):\n",
    "    print(f\"  Student {i+1}: ({dev:.4f})² = {sq_dev:.4f}\")\n",
    "\n",
    "# Sample variance and standard deviation\n",
    "sum_squared_dev = sum(squared_deviations)\n",
    "sample_variance = sum_squared_dev / (n_students - 1)  # Bessel's correction\n",
    "sample_std = np.sqrt(sample_variance)\n",
    "\n",
    "print(f\"\\nSample Variance Calculation:\")\n",
    "print(f\"Σ(xᵢ - x̄)² = {sum_squared_dev:.4f}\")\n",
    "print(f\"s² = Σ(xᵢ - x̄)²/(n-1) = {sum_squared_dev:.4f}/{n_students-1} = {sample_variance:.4f}\")\n",
    "print(f\"s = √(s²) = √{sample_variance:.4f} = {sample_std:.4f}\")\n",
    "\n",
    "print(f\"\\nPandas std(): {scores_only['Mathematics'].std():.4f}\")\n",
    "print(f\"Verification: Manual = Pandas? {abs(sample_std - scores_only['Mathematics'].std()) < 1e-10}\")\n",
    "\n",
    "print(\"\\n4.3 Standard Deviation Interpretation\")\n",
    "print(\"-\" * 30)\n",
    "for subject in numerical_columns:\n",
    "    mean_val = scores_only[subject].mean()\n",
    "    std_val = scores_only[subject].std()\n",
    "    cv = (std_val / mean_val) * 100  # Coefficient of variation\n",
    "\n",
    "    print(f\"{subject}:\")\n",
    "    print(f\"  Mean: {mean_val:.2f}, Std Dev: {std_val:.2f}\")\n",
    "    print(f\"  Coefficient of Variation: {cv:.2f}%\")\n",
    "    print(f\"  Interpretation: {'Low variability' if cv < 10 else 'Moderate variability' if cv < 20 else 'High variability'}\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 70)\n",
    "\n",
    "# ==========================================\n",
    "# PART 5: QUANTILES CALCULATION AND ANALYSIS\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n5. QUANTILES (PERCENTILES) - DETAILED CALCULATION\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "print(\"5.1 Pandas Built-in Quantile Calculation\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Common quantiles\n",
    "quantiles_to_calc = [0.25, 0.5, 0.75]\n",
    "quantile_names = ['Q1 (25th percentile)', 'Q2 (50th percentile/Median)', 'Q3 (75th percentile)']\n",
    "\n",
    "print(\"Subject-wise Quantiles:\")\n",
    "for subject in numerical_columns:\n",
    "    print(f\"\\n{subject}:\")\n",
    "    for q, name in zip(quantiles_to_calc, quantile_names):\n",
    "        q_value = scores_only[subject].quantile(q)\n",
    "        print(f\"  {name}: {q_value:.4f}\")\n",
    "\n",
    "print(\"\\n5.2 Manual Quantile Calculation\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Manual calculation for Mathematics Q1 (25th percentile)\n",
    "print(f\"Mathematics scores (sorted): {math_sorted}\")\n",
    "print(f\"Number of values (n): {n_students}\")\n",
    "\n",
    "# Calculate Q1 position\n",
    "q1_position = 0.25 * (n_students - 1)\n",
    "print(f\"\\nQ1 Position Calculation:\")\n",
    "print(f\"Position = p × (n-1) = 0.25 × ({n_students}-1) = 0.25 × {n_students-1} = {q1_position}\")\n",
    "\n",
    "if q1_position == int(q1_position):\n",
    "    # Position is integer\n",
    "    q1_manual = math_sorted[int(q1_position)]\n",
    "    print(f\"Position is integer: Q1 = x₍{int(q1_position)+1}₎ = {q1_manual}\")\n",
    "else:\n",
    "    # Interpolation required\n",
    "    lower_index = int(q1_position)\n",
    "    upper_index = lower_index + 1\n",
    "    fraction = q1_position - lower_index\n",
    "\n",
    "    q1_manual = math_sorted[lower_index] + fraction * (math_sorted[upper_index] - math_sorted[lower_index])\n",
    "    print(f\"Position requires interpolation:\")\n",
    "    print(f\"Lower index: {lower_index+1}, Value: {math_sorted[lower_index]}\")\n",
    "    print(f\"Upper index: {upper_index+1}, Value: {math_sorted[upper_index]}\")\n",
    "    print(f\"Fraction: {fraction:.4f}\")\n",
    "    print(f\"Q1 = {math_sorted[lower_index]} + {fraction:.4f} × ({math_sorted[upper_index]} - {math_sorted[lower_index]}) = {q1_manual:.4f}\")\n",
    "\n",
    "pandas_q1 = scores_only['Mathematics'].quantile(0.25)\n",
    "print(f\"\\nPandas quantile(0.25): {pandas_q1:.4f}\")\n",
    "print(f\"Verification: |Manual - Pandas| = {abs(q1_manual - pandas_q1):.4f}\")\n",
    "\n",
    "print(\"\\n5.3 Quartile Analysis and Interpretation\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "for subject in numerical_columns:\n",
    "    q1 = scores_only[subject].quantile(0.25)\n",
    "    q2 = scores_only[subject].quantile(0.5)  # Median\n",
    "    q3 = scores_only[subject].quantile(0.75)\n",
    "    iqr = q3 - q1  # Interquartile Range\n",
    "\n",
    "    print(f\"\\n{subject} Quartile Analysis:\")\n",
    "    print(f\"  Q1 (25%): {q1:.2f} - 25% of students scored below this\")\n",
    "    print(f\"  Q2 (50%): {q2:.2f} - Median score\")\n",
    "    print(f\"  Q3 (75%): {q3:.2f} - 75% of students scored below this\")\n",
    "    print(f\"  IQR: {iqr:.2f} - Middle 50% of scores span this range\")\n",
    "\n",
    "    # Outlier detection using IQR method\n",
    "    lower_fence = q1 - 1.5 * iqr\n",
    "    upper_fence = q3 + 1.5 * iqr\n",
    "    outliers = scores_only[subject][(scores_only[subject] < lower_fence) | (scores_only[subject] > upper_fence)]\n",
    "\n",
    "    print(f\"  Outlier boundaries: [{lower_fence:.2f}, {upper_fence:.2f}]\")\n",
    "    print(f\"  Outliers detected: {len(outliers)} ({list(outliers.values) if len(outliers) > 0 else 'None'})\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 70)\n",
    "\n",
    "# ==========================================\n",
    "# PART 6: COMPREHENSIVE STATISTICAL SUMMARY\n",
    "# ==========================================\n",
    "\n",
    "print(\"\\n6. COMPREHENSIVE STATISTICAL SUMMARY\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "# Generate comprehensive summary\n",
    "summary_stats = scores_only.describe()\n",
    "print(\"Complete Statistical Summary:\")\n",
    "print(summary_stats)\n",
    "\n",
    "print(\"\\n6.1 Custom Summary Statistics\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "custom_summary = pd.DataFrame({\n",
    "    'Count': scores_only.count(),\n",
    "    'Mean': scores_only.mean(),\n",
    "    'Median': scores_only.median(),\n",
    "    'Mode': scores_only.mode().iloc[0],  # First mode if multiple\n",
    "    'Std_Dev': scores_only.std(),\n",
    "    'Variance': scores_only.var(),\n",
    "    'Skewness': scores_only.skew(),\n",
    "    'Kurtosis': scores_only.kurtosis(),\n",
    "    'Range': scores_only.max() - scores_only.min(),\n",
    "    'IQR': scores_only.quantile(0.75) - scores_only.quantile(0.25)\n",
    "})\n",
    "\n",
    "print(custom_summary.round(4))\n",
    "\n",
    "print(\"\\n6.2 Key Statistical Insights\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "for subject in numerical_columns:\n",
    "    mean_val = scores_only[subject].mean()\n",
    "    median_val = scores_only[subject].median()\n",
    "    std_val = scores_only[subject].std()\n",
    "    skew_val = scores_only[subject].skew()\n",
    "\n",
    "    print(f\"\\n{subject} Insights:\")\n",
    "    print(f\"  Central Tendency: Mean={mean_val:.1f}, Median={median_val:.1f}\")\n",
    "    print(f\"  Variability: Std Dev={std_val:.2f} ({'Low' if std_val < 4 else 'Moderate' if std_val < 6 else 'High'} variation)\")\n",
    "    print(f\"  Distribution Shape: {'Symmetric' if abs(skew_val) < 0.5 else 'Moderately Skewed' if abs(skew_val) < 1 else 'Highly Skewed'}\")\n",
    "    print(f\"  Performance Level: {'Excellent' if mean_val >= 90 else 'Good' if mean_val >= 85 else 'Average' if mean_val >= 80 else 'Below Average'}\")\n",
    "\n",
    "print(\"\\n\" + \"=\" * 70)\n",
    "print(\"STATISTICAL COMPUTATION COMPLETED SUCCESSFULLY\")\n",
    "print(\"All calculations verified against pandas built-in functions\")\n",
    "print(\"=\" * 70)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb9a640d",
   "metadata": {},
   "source": [
    "### Q4. What is the difference between ndarray and array in Numpy? How would you convert a Pandas dataframe into a Numpy array?\n",
    "\n",
    "#### Mathematical Foundation and Data Structure Theory\n",
    "\n",
    "The distinction between `ndarray` and `array` in NumPy is fundamental to understanding NumPy's architecture and data representation in scientific computing.\n",
    "\n",
    "#### Theoretical Analysis\n",
    "\n",
    "**1. NumPy ndarray (N-dimensional array):**\n",
    "\n",
    "An `ndarray` is the core data structure in NumPy, representing homogeneous multidimensional arrays. Mathematically, an ndarray can be viewed as a tensor $\\mathbf{T}$ of rank $n$:\n",
    "\n",
    "$$\\mathbf{T} \\in \\mathbb{R}^{d_1 \\times d_2 \\times \\cdots \\times d_n}$$\n",
    "\n",
    "Where:\n",
    "- $d_i$ represents the size of the $i$-th dimension\n",
    "- $n$ is the number of dimensions (rank of the tensor)\n",
    "- All elements share the same data type for memory efficiency\n",
    "\n",
    "**Memory Layout:** NumPy arrays use contiguous memory allocation following either:\n",
    "- **C-order (row-major)**: Elements stored row by row\n",
    "- **Fortran-order (column-major)**: Elements stored column by column\n",
    "\n",
    "**2. np.array() Function:**\n",
    "\n",
    "The `np.array()` function is a **constructor** that creates ndarray objects. It performs several operations:\n",
    "\n",
    "1. **Type inference**: Automatically determines the most appropriate dtype\n",
    "2. **Memory allocation**: Allocates contiguous memory block\n",
    "3. **Data copying**: Creates a copy of input data (unless specified otherwise)\n",
    "\n",
    "#### Conversion Methods: DataFrame → NumPy Array\n",
    "\n",
    "**Mathematical Representation:**\n",
    "\n",
    "Given a Pandas DataFrame $\\mathbf{D}$ with shape $(m, n)$:\n",
    "\n",
    "$$\\mathbf{D} = \\begin{pmatrix} \n",
    "d_{1,1} & d_{1,2} & \\cdots & d_{1,n} \\\\\n",
    "d_{2,1} & d_{2,2} & \\cdots & d_{2,n} \\\\\n",
    "\\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
    "d_{m,1} & d_{m,2} & \\cdots & d_{m,n}\n",
    "\\end{pmatrix}$$\n",
    "\n",
    "**Conversion transforms this to NumPy array** $\\mathbf{A}$:\n",
    "\n",
    "$$\\mathbf{A} = \\text{numpy\\_array}(\\mathbf{D}) \\in \\mathbb{R}^{m \\times n}$$\n",
    "\n",
    "**Available Methods:**\n",
    "\n",
    "1. **`.values` attribute** (Legacy):\n",
    "   $$\\mathbf{A} = \\mathbf{D}.\\text{values}$$\n",
    "\n",
    "2. **`.to_numpy()` method** (Recommended):\n",
    "   $$\\mathbf{A} = \\mathbf{D}.\\text{to\\_numpy}()$$\n",
    "\n",
    "3. **Column-specific conversion**:\n",
    "   $$\\mathbf{a}_j = \\mathbf{D}[\\text{column}_j].\\text{to\\_numpy}()$$\n",
    "\n",
    "#### Performance Considerations\n",
    "\n",
    "**Time Complexity:** $O(mn)$ for copying all elements\n",
    "**Space Complexity:** $O(mn)$ for creating new array (unless using views)\n",
    "\n",
    "**Memory Efficiency Formula:**\n",
    "$$\\text{Memory} = m \\times n \\times \\text{sizeof}(\\text{dtype})$$\n",
    "\n",
    "This conversion enables leveraging NumPy's vectorized operations, which provide significant performance improvements through:\n",
    "- SIMD (Single Instruction, Multiple Data) operations\n",
    "- Cache-efficient memory access patterns\n",
    "- Optimized linear algebra libraries (BLAS/LAPACK)\n",
    "\n",
    "#### Cross-Reference\n",
    "*See `statistical_formulas_reference.ipynb` Section 5.1 for detailed matrix operations and `01_descriptive_statistics_interactive.ipynb` for practical array manipulation examples.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "5baa5846",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "================================================================================\n",
      "Q4: NUMPY NDARRAY vs ARRAY FUNCTION DEMONSTRATION\n",
      "================================================================================\n",
      "\n",
      "1. ARRAY CREATION AND TYPE ANALYSIS\n",
      "----------------------------------------\n",
      "Created using np.array(): [1 2 3 4 5]\n",
      "Type: <class 'numpy.ndarray'>\n",
      "Is it ndarray? True\n",
      "Data type: int64\n",
      "Shape: (5,)\n",
      "Number of dimensions: 1\n",
      "\n",
      "============================================================\n",
      "\n",
      "2. PANDAS DATAFRAME TO NUMPY ARRAY CONVERSION\n",
      "--------------------------------------------------\n",
      "Original DataFrame (Student Performance Data):\n",
      "  Student_ID  Mathematics  Science  English  Physics\n",
      "0     STU001           85       88       76       90\n",
      "1     STU002           92       85       89       87\n",
      "2     STU003           78       92       82       85\n",
      "3     STU004           96       89       91       93\n",
      "4     STU005           87       86       85       89\n",
      "DataFrame shape: (20, 5)\n",
      "DataFrame dtypes:\n",
      "Student_ID     object\n",
      "Mathematics     int64\n",
      "Science         int64\n",
      "English         int64\n",
      "Physics         int64\n",
      "dtype: object\n",
      "\n",
      "2.1 Method 1: Using .values attribute (Legacy approach)\n",
      "------------------------------\n",
      "Type: <class 'numpy.ndarray'>\n",
      "Shape: (20, 5)\n",
      "Data type: object\n",
      "First 5 rows of NumPy array:\n",
      "[['STU001' 85 88 76 90]\n",
      " ['STU002' 92 85 89 87]\n",
      " ['STU003' 78 92 82 85]\n",
      " ['STU004' 96 89 91 93]\n",
      " ['STU005' 87 86 85 89]]\n",
      "\n",
      "2.2 Method 2: Using .to_numpy() method (Recommended)\n",
      "------------------------------\n",
      "Type: <class 'numpy.ndarray'>\n",
      "Shape: (20, 5)\n",
      "Data type: object\n",
      "Array equality check: True\n",
      "\n",
      "2.3 Method 3: Converting specific numerical columns\n",
      "------------------------------\n",
      "Numerical data shape: (20, 4)\n",
      "Data type: int64\n",
      "First 5 rows of numerical data:\n",
      "[[85 88 76 90]\n",
      " [92 85 89 87]\n",
      " [78 92 82 85]\n",
      " [96 89 91 93]\n",
      " [87 86 85 89]]\n",
      "\n",
      "2.4 Method 4: Converting single column to 1D array\n",
      "------------------------------\n",
      "Math scores array: [85 92 78 96 87 91 83 89 94 88 76 95 82 90 86 93 79 84 97 81]\n",
      "Type: <class 'numpy.ndarray'>\n",
      "Shape: (20,)\n",
      "Mean score: 87.30\n",
      "\n",
      "============================================================\n",
      "\n",
      "3. MATHEMATICAL ANALYSIS OF CONVERSION\n",
      "----------------------------------------\n",
      "Original DataFrame statistics:\n",
      "       Mathematics    Science    English   Physics\n",
      "count    20.000000  20.000000  20.000000  20.00000\n",
      "mean     87.300000  89.000000  86.800000  89.80000\n",
      "std       6.241626   3.769685   5.136044   3.95501\n",
      "min      76.000000  83.000000  76.000000  84.00000\n",
      "25%      82.750000  86.000000  83.750000  86.75000\n",
      "50%      87.500000  88.500000  87.500000  89.50000\n",
      "75%      92.250000  92.000000  90.250000  92.25000\n",
      "max      97.000000  96.000000  95.000000  98.00000\n",
      "\n",
      "NumPy array statistics (numerical columns only):\n",
      "Mean values: [87.3 89.  86.8 89.8]\n",
      "Standard deviations: [6.24162597 3.76968517 5.13604394 3.95501015]\n",
      "Correlation matrix shape: (4, 4)\n",
      "\n",
      "4. MEMORY AND PERFORMANCE COMPARISON\n",
      "----------------------------------------\n",
      "DataFrame memory usage: 1872 bytes\n",
      "NumPy array memory usage: 640 bytes\n",
      "Memory efficiency ratio: 0.342\n",
      "\n",
      "================================================================================\n"
     ]
    }
   ],
   "source": [
    "# Demonstration of ndarray vs array\n",
    "import numpy as np\n",
    "\n",
    "print(\"=\" * 80)\n",
    "print(\"Q4: NUMPY NDARRAY vs ARRAY FUNCTION DEMONSTRATION\")\n",
    "print(\"=\" * 80)\n",
    "\n",
    "# Creating an array using np.array() function\n",
    "arr = np.array([1, 2, 3, 4, 5])\n",
    "print(\"\\n1. ARRAY CREATION AND TYPE ANALYSIS\")\n",
    "print(\"-\" * 40)\n",
    "print(f\"Created using np.array(): {arr}\")\n",
    "print(f\"Type: {type(arr)}\")\n",
    "print(f\"Is it ndarray? {isinstance(arr, np.ndarray)}\")\n",
    "print(f\"Data type: {arr.dtype}\")\n",
    "print(f\"Shape: {arr.shape}\")\n",
    "print(f\"Number of dimensions: {arr.ndim}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "\n",
    "# Convert Pandas DataFrame to NumPy array\n",
    "print(\"\\n2. PANDAS DATAFRAME TO NUMPY ARRAY CONVERSION\")\n",
    "print(\"-\" * 50)\n",
    "print(\"Original DataFrame (Student Performance Data):\")\n",
    "print(scores_df.head())\n",
    "print(f\"DataFrame shape: {scores_df.shape}\")\n",
    "print(f\"DataFrame dtypes:\\n{scores_df.dtypes}\")\n",
    "\n",
    "print(\"\\n2.1 Method 1: Using .values attribute (Legacy approach)\")\n",
    "print(\"-\" * 30)\n",
    "numpy_array1 = scores_df.values\n",
    "print(f\"Type: {type(numpy_array1)}\")\n",
    "print(f\"Shape: {numpy_array1.shape}\")\n",
    "print(f\"Data type: {numpy_array1.dtype}\")\n",
    "print(\"First 5 rows of NumPy array:\")\n",
    "print(numpy_array1[:5])\n",
    "\n",
    "print(\"\\n2.2 Method 2: Using .to_numpy() method (Recommended)\")\n",
    "print(\"-\" * 30)\n",
    "numpy_array2 = scores_df.to_numpy()\n",
    "print(f\"Type: {type(numpy_array2)}\")\n",
    "print(f\"Shape: {numpy_array2.shape}\")\n",
    "print(f\"Data type: {numpy_array2.dtype}\")\n",
    "print(\"Array equality check:\", np.array_equal(numpy_array1, numpy_array2))\n",
    "\n",
    "print(\"\\n2.3 Method 3: Converting specific numerical columns\")\n",
    "print(\"-\" * 30)\n",
    "numerical_data = scores_df[['Mathematics', 'Science', 'English', 'Physics']].to_numpy()\n",
    "print(f\"Numerical data shape: {numerical_data.shape}\")\n",
    "print(f\"Data type: {numerical_data.dtype}\")\n",
    "print(\"First 5 rows of numerical data:\")\n",
    "print(numerical_data[:5])\n",
    "\n",
    "print(\"\\n2.4 Method 4: Converting single column to 1D array\")\n",
    "print(\"-\" * 30)\n",
    "math_scores_array = scores_df['Mathematics'].to_numpy()\n",
    "print(f\"Math scores array: {math_scores_array}\")\n",
    "print(f\"Type: {type(math_scores_array)}\")\n",
    "print(f\"Shape: {math_scores_array.shape}\")\n",
    "print(f\"Mean score: {np.mean(math_scores_array):.2f}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "\n",
    "print(\"\\n3. MATHEMATICAL ANALYSIS OF CONVERSION\")\n",
    "print(\"-\" * 40)\n",
    "\n",
    "# Demonstrate mathematical operations possible after conversion\n",
    "print(\"Original DataFrame statistics:\")\n",
    "print(scores_df.describe())\n",
    "\n",
    "print(\"\\nNumPy array statistics (numerical columns only):\")\n",
    "print(f\"Mean values: {np.mean(numerical_data, axis=0)}\")\n",
    "print(f\"Standard deviations: {np.std(numerical_data, axis=0, ddof=1)}\")\n",
    "print(f\"Correlation matrix shape: {np.corrcoef(numerical_data.T).shape}\")\n",
    "\n",
    "print(\"\\n4. MEMORY AND PERFORMANCE COMPARISON\")\n",
    "print(\"-\" * 40)\n",
    "import sys\n",
    "\n",
    "df_memory = scores_df.memory_usage(deep=True).sum()\n",
    "array_memory = numerical_data.nbytes\n",
    "\n",
    "print(f\"DataFrame memory usage: {df_memory} bytes\")\n",
    "print(f\"NumPy array memory usage: {array_memory} bytes\")\n",
    "print(f\"Memory efficiency ratio: {array_memory/df_memory:.3f}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*80)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "800840c7",
   "metadata": {},
   "source": [
    "### Q5. What is the difference between test[:, 0] and test[:, [0]]? Explain with example the difference between Vectorisation and Broadcasting in NumPy?\n",
    "\n",
    "#### Mathematical Foundation of Array Indexing and Operations\n",
    "\n",
    "Understanding array indexing, vectorization, and broadcasting is crucial for efficient numerical computing and forms the basis of modern data science operations.\n",
    "\n",
    "#### Theoretical Analysis of Array Indexing\n",
    "\n",
    "**Given a matrix** $\\mathbf{T} \\in \\mathbb{R}^{m \\times n}$:\n",
    "\n",
    "$$\\mathbf{T} = \\begin{pmatrix} \n",
    "t_{1,1} & t_{1,2} & \\cdots & t_{1,n} \\\\\n",
    "t_{2,1} & t_{2,2} & \\cdots & t_{2,n} \\\\\n",
    "\\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
    "t_{m,1} & t_{m,2} & \\cdots & t_{m,n}\n",
    "\\end{pmatrix}$$\n",
    "\n",
    "**1. `test[:, 0]` - Fancy Indexing (Returns 1D array):**\n",
    "\n",
    "This operation extracts the first column as a 1D vector:\n",
    "\n",
    "$$\\mathbf{v} = \\mathbf{T}[:, 0] = \\begin{pmatrix} t_{1,1} \\\\ t_{2,1} \\\\ \\vdots \\\\ t_{m,1} \\end{pmatrix} \\in \\mathbb{R}^m$$\n",
    "\n",
    "**Mathematical properties:**\n",
    "- **Shape**: $(m,)$ - 1-dimensional\n",
    "- **Rank**: 1 (vector)\n",
    "- **Memory layout**: Contiguous 1D array\n",
    "\n",
    "**2. `test[:, [0]]` - Advanced Indexing (Returns 2D array):**\n",
    "\n",
    "This operation extracts the first column while preserving 2D structure:\n",
    "\n",
    "$$\\mathbf{M} = \\mathbf{T}[:, [0]] = \\begin{pmatrix} t_{1,1} \\\\ t_{2,1} \\\\ \\vdots \\\\ t_{m,1} \\end{pmatrix} \\in \\mathbb{R}^{m \\times 1}$$\n",
    "\n",
    "**Mathematical properties:**\n",
    "- **Shape**: $(m, 1)$ - 2-dimensional\n",
    "- **Rank**: 2 (matrix)\n",
    "- **Memory layout**: 2D array with single column\n",
    "\n",
    "#### Vectorization Theory\n",
    "\n",
    "**Definition**: Vectorization is the process of applying operations to entire arrays without explicit Python loops, leveraging optimized C/Fortran implementations.\n",
    "\n",
    "**Mathematical Representation:**\n",
    "\n",
    "Instead of element-wise operations:\n",
    "$$\\forall i: c_i = f(a_i, b_i)$$ \n",
    "\n",
    "Vectorization performs:\n",
    "$$\\mathbf{c} = f(\\mathbf{a}, \\mathbf{b})$$\n",
    "\n",
    "**Performance Analysis:**\n",
    "- **Time Complexity**: $O(n)$ with optimized constants\n",
    "- **Memory Access**: Sequential, cache-friendly\n",
    "- **SIMD Utilization**: Multiple operations per CPU instruction\n",
    "\n",
    "**Example Operation:**\n",
    "$$\\mathbf{a} \\odot \\mathbf{b} = \\begin{pmatrix} a_1 \\\\ a_2 \\\\ \\vdots \\\\ a_n \\end{pmatrix} \\odot \\begin{pmatrix} b_1 \\\\ b_2 \\\\ \\vdots \\\\ b_n \\end{pmatrix} = \\begin{pmatrix} a_1 \\cdot b_1 \\\\ a_2 \\cdot b_2 \\\\ \\vdots \\\\ a_n \\cdot b_n \\end{pmatrix}$$\n",
    "\n",
    "#### Broadcasting Theory\n",
    "\n",
    "**Definition**: Broadcasting allows NumPy to perform arithmetic operations on arrays with different shapes by automatically expanding dimensions according to specific rules.\n",
    "\n",
    "**Broadcasting Rules:**\n",
    "\n",
    "1. **Rule 1**: Arrays are aligned from the rightmost dimension\n",
    "2. **Rule 2**: Dimensions of size 1 can be \"stretched\" to match\n",
    "3. **Rule 3**: Missing dimensions are assumed to be size 1\n",
    "\n",
    "**Mathematical Formalization:**\n",
    "\n",
    "Given arrays $\\mathbf{A} \\in \\mathbb{R}^{m \\times n}$ and $\\mathbf{b} \\in \\mathbb{R}^n$:\n",
    "\n",
    "$$\\mathbf{A} + \\mathbf{b} = \\begin{pmatrix} \n",
    "a_{1,1} & a_{1,2} & \\cdots & a_{1,n} \\\\\n",
    "a_{2,1} & a_{2,2} & \\cdots & a_{2,n} \\\\\n",
    "\\vdots & \\vdots & \\ddots & \\vdots \\\\\n",
    "a_{m,1} & a_{m,2} & \\cdots & a_{m,n}\n",
    "\\end{pmatrix} + \\begin{pmatrix} b_1 & b_2 & \\cdots & b_n \\\\ b_1 & b_2 & \\cdots & b_n \\\\ \\vdots & \\vdots & \\ddots & \\vdots \\\\ b_1 & b_2 & \\cdots & b_n \\end{pmatrix}$$\n",
    "\n",
    "**Result:**\n",
    "$$\\mathbf{C}_{i,j} = a_{i,j} + b_j \\quad \\forall i \\in [1,m], j \\in [1,n]$$\n",
    "\n",
    "**Broadcasting with Scalars:**\n",
    "$$\\mathbf{A} + c = \\mathbf{A} + c \\cdot \\mathbf{1}_{m \\times n}$$\n",
    "\n",
    "Where $\\mathbf{1}_{m \\times n}$ is the matrix of ones.\n",
    "\n",
    "**Memory Efficiency:**\n",
    "Broadcasting avoids creating intermediate arrays, operating on original shapes:\n",
    "- **Space Complexity**: $O(1)$ additional memory\n",
    "- **Time Complexity**: $O(mn)$ for result computation\n",
    "\n",
    "#### Performance Comparison\n",
    "\n",
    "**Vectorization vs. Loop Performance:**\n",
    "$$\\text{Speedup} = \\frac{T_{\\text{loop}}}{T_{\\text{vectorized}}} \\approx 10-100\\times$$\n",
    "\n",
    "**Broadcasting vs. Explicit Expansion:**\n",
    "$$\\text{Memory Savings} = \\frac{\\text{Size}_{\\text{expanded}} - \\text{Size}_{\\text{original}}}{\\text{Size}_{\\text{expanded}}} \\times 100\\%$$\n",
    "\n",
    "#### Cross-Reference\n",
    "*See `statistical_formulas_reference.ipynb` Section 5.1 for matrix operations and `01_descriptive_statistics_interactive.ipynb` for vectorization examples in statistical computations.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "37eb9d7d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original array 'test':\n",
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n",
      "Shape: (3, 3)\n",
      "\n",
      "========================================\n",
      "\n",
      "test[:, 0] - returns 1D array:\n",
      "[1 4 7]\n",
      "Shape: (3,)\n",
      "Dimensions: 1\n",
      "\n",
      "========================================\n",
      "\n",
      "test[:, [0]] - returns 2D array:\n",
      "[[1]\n",
      " [4]\n",
      " [7]]\n",
      "Shape: (3, 1)\n",
      "Dimensions: 2\n",
      "\n",
      "==================================================\n",
      "\n",
      "VECTORIZATION EXAMPLE:\n",
      "arr1: [1 2 3 4 5]\n",
      "arr2: [2 3 4 5 6]\n",
      "Vectorized multiplication (arr1 * arr2): [ 2  6 12 20 30]\n",
      "\n",
      "==================================================\n",
      "\n",
      "BROADCASTING EXAMPLE:\n",
      "Original matrix:\n",
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n",
      "Shape: (3, 3)\n",
      "\n",
      "1. Broadcasting with scalar:\n",
      "matrix + 10:\n",
      "[[11 12 13]\n",
      " [14 15 16]\n",
      " [17 18 19]]\n",
      "\n",
      "2. Broadcasting with vector:\n",
      "vector: [1 2 3] shape: (3,)\n",
      "matrix + vector:\n",
      "[[ 2  4  6]\n",
      " [ 5  7  9]\n",
      " [ 8 10 12]]\n",
      "\n",
      "3. Broadcasting with column vector:\n",
      "column vector: [1 2 3] shape: (3, 1)\n",
      "matrix + column_vector:\n",
      "[[ 2  3  4]\n",
      " [ 6  7  8]\n",
      " [10 11 12]]\n"
     ]
    }
   ],
   "source": [
    "# Demonstrate difference between test[:, 0] and test[:, [0]]\n",
    "test = np.array([[1, 2, 3],\n",
    "                 [4, 5, 6],\n",
    "                 [7, 8, 9]])\n",
    "\n",
    "print(\"Original array 'test':\")\n",
    "print(test)\n",
    "print(\"Shape:\", test.shape)\n",
    "\n",
    "print(\"\\n\" + \"=\"*40 + \"\\n\")\n",
    "\n",
    "# Using test[:, 0] - returns 1D array\n",
    "result1 = test[:, 0]\n",
    "print(\"test[:, 0] - returns 1D array:\")\n",
    "print(result1)\n",
    "print(\"Shape:\", result1.shape)\n",
    "print(\"Dimensions:\", result1.ndim)\n",
    "\n",
    "print(\"\\n\" + \"=\"*40 + \"\\n\")\n",
    "\n",
    "# Using test[:, [0]] - returns 2D array\n",
    "result2 = test[:, [0]]\n",
    "print(\"test[:, [0]] - returns 2D array:\")\n",
    "print(result2)\n",
    "print(\"Shape:\", result2.shape)\n",
    "print(\"Dimensions:\", result2.ndim)\n",
    "\n",
    "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
    "\n",
    "# VECTORIZATION Example\n",
    "print(\"VECTORIZATION EXAMPLE:\")\n",
    "arr1 = np.array([1, 2, 3, 4, 5])\n",
    "arr2 = np.array([2, 3, 4, 5, 6])\n",
    "\n",
    "# Instead of using loops, vectorized operation\n",
    "vectorized_result = arr1 * arr2\n",
    "print(\"arr1:\", arr1)\n",
    "print(\"arr2:\", arr2)\n",
    "print(\"Vectorized multiplication (arr1 * arr2):\", vectorized_result)\n",
    "\n",
    "print(\"\\n\" + \"=\"*50 + \"\\n\")\n",
    "\n",
    "# BROADCASTING Example\n",
    "print(\"BROADCASTING EXAMPLE:\")\n",
    "matrix = np.array([[1, 2, 3],\n",
    "                   [4, 5, 6],\n",
    "                   [7, 8, 9]])\n",
    "scalar = 10\n",
    "vector = np.array([1, 2, 3])\n",
    "\n",
    "print(\"Original matrix:\")\n",
    "print(matrix)\n",
    "print(\"Shape:\", matrix.shape)\n",
    "\n",
    "print(\"\\n1. Broadcasting with scalar:\")\n",
    "result_scalar = matrix + scalar\n",
    "print(\"matrix + 10:\")\n",
    "print(result_scalar)\n",
    "\n",
    "print(\"\\n2. Broadcasting with vector:\")\n",
    "print(\"vector:\", vector, \"shape:\", vector.shape)\n",
    "result_vector = matrix + vector\n",
    "print(\"matrix + vector:\")\n",
    "print(result_vector)\n",
    "\n",
    "print(\"\\n3. Broadcasting with column vector:\")\n",
    "col_vector = np.array([[1], [2], [3]])\n",
    "print(\"column vector:\", col_vector.flatten(), \"shape:\", col_vector.shape)\n",
    "result_col = matrix + col_vector\n",
    "print(\"matrix + column_vector:\")\n",
    "print(result_col)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "800d9f08",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Short Questions (3 × 4 = 12 marks)\n",
    "\n",
    "### Q1. What is the difference between seaborn and matplotlib?\n",
    "\n",
    "#### Theoretical Foundation of Data Visualization Libraries\n",
    "\n",
    "Understanding the architectural differences between visualization libraries is crucial for selecting appropriate tools for statistical analysis and data exploration.\n",
    "\n",
    "#### Mathematical and Design Philosophy Analysis\n",
    "\n",
    "**Matplotlib Architecture:**\n",
    "\n",
    "Matplotlib follows a **state-based plotting model** inspired by MATLAB, where plots are constructed through sequential function calls that modify a global state.\n",
    "\n",
    "**Mathematical Foundation:**\n",
    "- **Figure-Axes Hierarchy**: Uses a tree structure where Figure $\\rightarrow$ Axes $\\rightarrow$ Artists\n",
    "- **Coordinate Systems**: Supports multiple coordinate transformations:\n",
    "  $$\\text{Transform}: \\mathbb{R}^2_{\\text{data}} \\rightarrow \\mathbb{R}^2_{\\text{display}}$$\n",
    "\n",
    "**Control Level**: **Low-level** - Direct manipulation of plot elements\n",
    "\n",
    "**Seaborn Architecture:**\n",
    "\n",
    "Seaborn implements a **grammar of graphics** approach, focusing on statistical relationships and data-driven aesthetics.\n",
    "\n",
    "**Statistical Foundation:**\n",
    "- **Relationship-Centric**: Emphasizes statistical relationships $f: X \\rightarrow Y$\n",
    "- **Automatic Aesthetics**: Implements perceptual uniformity in color spaces\n",
    "- **Built-in Statistical Functions**: Integrates statistical transformations:\n",
    "  $$\\hat{y} = f(x) + \\epsilon \\text{ where } \\epsilon \\sim \\mathcal{N}(0, \\sigma^2)$$\n",
    "\n",
    "#### Comparative Analysis\n",
    "\n",
    "| **Aspect** | **Matplotlib** | **Seaborn** |\n",
    "|------------|----------------|-------------|\n",
    "| **Abstraction Level** | Low-level (Artist layer) | High-level (Statistical layer) |\n",
    "| **Code Complexity** | $O(n)$ lines for complex plots | $O(1)$ lines for statistical plots |\n",
    "| **Default Aesthetics** | Basic, MATLAB-inspired | Statistically-informed, publication-ready |\n",
    "| **Statistical Integration** | Manual implementation required | Built-in statistical functions |\n",
    "| **Customization** | Complete control over every element | Structured customization through themes |\n",
    "| **Performance** | Direct rendering, faster for simple plots | Optimized for statistical computations |\n",
    "\n",
    "#### Statistical Visualization Theory\n",
    "\n",
    "**Perceptual Uniformity in Seaborn:**\n",
    "\n",
    "Seaborn implements perceptually uniform color spaces following the principle:\n",
    "$$\\Delta E = \\sqrt{(\\Delta L^*)^2 + (\\Delta a^*)^2 + (\\Delta b^*)^2}$$\n",
    "\n",
    "Where $(L^*, a^*, b^*)$ represents the CIELAB color space coordinates.\n",
    "\n",
    "**Grammar of Graphics Implementation:**\n",
    "\n",
    "Seaborn follows Wilkinson's Grammar of Graphics:\n",
    "$$\\text{Plot} = \\text{Data} + \\text{Mapping} + \\text{Geometry} + \\text{Statistics} + \\text{Scale} + \\text{Coordinate} + \\text{Facet}$$\n",
    "\n",
    "#### Practical Application Guidelines\n",
    "\n",
    "**Use Matplotlib when:**\n",
    "- Custom plot types requiring fine control\n",
    "- Performance-critical applications\n",
    "- Integration with existing matplotlib-based code\n",
    "- Complex multi-panel layouts with precise positioning\n",
    "\n",
    "**Use Seaborn when:**\n",
    "- Statistical data exploration\n",
    "- Publication-quality plots with minimal code\n",
    "- Categorical data visualization\n",
    "- Regression analysis visualization\n",
    "- Distribution analysis\n",
    "\n",
    "#### Mathematical Example: Statistical Plotting\n",
    "\n",
    "**Regression Analysis:**\n",
    "For linear relationship $y = \\beta_0 + \\beta_1 x + \\epsilon$:\n",
    "\n",
    "- **Matplotlib**: Requires manual calculation of regression line and confidence intervals\n",
    "- **Seaborn**: Automatic computation using:\n",
    "  $$\\hat{\\beta}_1 = \\frac{\\sum(x_i - \\bar{x})(y_i - \\bar{y})}{\\sum(x_i - \\bar{x})^2}$$\n",
    "  $$\\text{CI} = \\hat{y} \\pm t_{\\alpha/2} \\cdot SE(\\hat{y})$$\n",
    "\n",
    "#### Cross-Reference\n",
    "*See `01_descriptive_statistics_interactive.ipynb` for visualization examples and `statistical_formulas_reference.ipynb` Section 4.1 for regression analysis mathematics.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f2b4d01a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Key Differences:\n",
      "1. Seaborn automatically handles categorical data with color coding\n",
      "2. Seaborn has better default aesthetics\n",
      "3. Seaborn requires less code for statistical plots\n",
      "4. Matplotlib gives more granular control over plot elements\n"
     ]
    }
   ],
   "source": [
    "# Demonstration of Matplotlib vs Seaborn\n",
    "fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
    "\n",
    "# Sample data\n",
    "x = np.random.normal(0, 1, 100)\n",
    "y = 2 * x + np.random.normal(0, 0.5, 100)\n",
    "df_demo = pd.DataFrame({'x': x, 'y': y, 'category': np.random.choice(['A', 'B', 'C'], 100)})\n",
    "\n",
    "# Matplotlib scatter plot\n",
    "axes[0, 0].scatter(df_demo['x'], df_demo['y'])\n",
    "axes[0, 0].set_title('Matplotlib Scatter Plot')\n",
    "axes[0, 0].set_xlabel('X')\n",
    "axes[0, 0].set_ylabel('Y')\n",
    "\n",
    "# Seaborn scatter plot\n",
    "sns.scatterplot(data=df_demo, x='x', y='y', hue='category', ax=axes[0, 1])\n",
    "axes[0, 1].set_title('Seaborn Scatter Plot (with categories)')\n",
    "\n",
    "# Matplotlib histogram\n",
    "axes[1, 0].hist(df_demo['x'], bins=20)\n",
    "axes[1, 0].set_title('Matplotlib Histogram')\n",
    "axes[1, 0].set_xlabel('X')\n",
    "axes[1, 0].set_ylabel('Frequency')\n",
    "\n",
    "# Seaborn histogram with better styling\n",
    "sns.histplot(data=df_demo, x='x', hue='category', ax=axes[1, 1])\n",
    "axes[1, 1].set_title('Seaborn Histogram (with categories)')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"Key Differences:\")\n",
    "print(\"1. Seaborn automatically handles categorical data with color coding\")\n",
    "print(\"2. Seaborn has better default aesthetics\")\n",
    "print(\"3. Seaborn requires less code for statistical plots\")\n",
    "print(\"4. Matplotlib gives more granular control over plot elements\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38ec8ffc",
   "metadata": {},
   "source": [
    "### Q2. Explain in detail which sampling technique will be best for the given problem: \"A local hotel chain intends to survey its visitors one day, so they randomly sent out questionnaires that day and surveyed every visitor on the venue.\" Your reason should have at least 2 points.\n",
    "\n",
    "#### Mathematical Foundation of Sampling Theory\n",
    "\n",
    "Selecting appropriate sampling methodology requires understanding the trade-offs between statistical accuracy, practical feasibility, and resource constraints in survey design.\n",
    "\n",
    "#### Problem Analysis and Statistical Framework\n",
    "\n",
    "**Given Scenario**: Hotel chain surveying visitors on a single day with universal coverage attempt.\n",
    "\n",
    "**Population Definition**: \n",
    "Let $N$ = total number of visitors on the survey day\n",
    "Let $\\mathcal{U} = \\{u_1, u_2, \\ldots, u_N\\}$ be the finite population of hotel visitors\n",
    "\n",
    "#### Theoretical Sampling Approaches\n",
    "\n",
    "**Current Approach Analysis: Census Sampling**\n",
    "\n",
    "If literally \"every visitor\" is surveyed, this constitutes a **census**:\n",
    "$$\\text{Census}: n = N \\text{ (complete enumeration)}$$\n",
    "\n",
    "**Mathematical Properties:**\n",
    "- **Sampling Error**: $\\epsilon = 0$ (no sampling error)\n",
    "- **Population Parameter**: $\\mu = \\frac{1}{N}\\sum_{i=1}^{N} y_i$ (exact)\n",
    "- **Variance**: $\\sigma^2 = \\frac{1}{N}\\sum_{i=1}^{N} (y_i - \\mu)^2$ (population variance)\n",
    "\n",
    "#### Recommended Approach: Systematic Sampling\n",
    "\n",
    "**Mathematical Framework:**\n",
    "\n",
    "For systematic sampling with interval $k$:\n",
    "$$k = \\left\\lfloor \\frac{N}{n} \\right\\rfloor$$\n",
    "\n",
    "Where $n$ is desired sample size.\n",
    "\n",
    "**Selection Process:**\n",
    "1. Random start: $r \\sim \\text{Uniform}(1, k)$\n",
    "2. Systematic selection: $\\{r, r+k, r+2k, \\ldots, r+(n-1)k\\}$\n",
    "\n",
    "**Estimator:**\n",
    "$$\\hat{\\mu}_{sys} = \\frac{1}{n}\\sum_{i=1}^{n} y_i$$\n",
    "\n",
    "**Variance (for random populations):**\n",
    "$$\\text{Var}(\\hat{\\mu}_{sys}) \\approx \\frac{\\sigma^2}{n}\\left(1 - \\frac{n}{N}\\right)$$\n",
    "\n",
    "#### Justification for Systematic Sampling\n",
    "\n",
    "**Point 1: Temporal Stratification and Practical Efficiency**\n",
    "\n",
    "**Mathematical Rationale:**\n",
    "Hotel visitor flow exhibits temporal patterns. Let $f(t)$ represent visitor arrival rate at time $t$:\n",
    "$$f(t) = \\lambda_0 + \\sum_{i=1}^{k} \\alpha_i \\cos\\left(\\frac{2\\pi i t}{T}\\right) + \\sum_{i=1}^{k} \\beta_i \\sin\\left(\\frac{2\\pi i t}{T}\\right)$$\n",
    "\n",
    "Where $T$ represents the daily period.\n",
    "\n",
    "**Systematic sampling ensures:**\n",
    "- **Proportional representation** across time periods\n",
    "- **Reduced variance** compared to simple random sampling when temporal correlation exists\n",
    "- **Feasibility**: $O(1)$ selection rule vs. $O(n)$ random number generation\n",
    "\n",
    "**Point 2: Enhanced Precision with Trending Populations**\n",
    "\n",
    "**Mathematical Foundation:**\n",
    "When population exhibits trends, systematic sampling provides better precision than simple random sampling.\n",
    "\n",
    "**Precision Gain:**\n",
    "$$\\text{Relative Efficiency} = \\frac{\\text{Var}(\\hat{\\mu}_{SRS})}{\\text{Var}(\\hat{\\mu}_{sys})} = \\frac{1 + (n-1)\\rho}{1 - \\rho}$$\n",
    "\n",
    "Where $\\rho$ is the intra-class correlation between adjacent units.\n",
    "\n",
    "For hotel visitors with temporal clustering (business travelers vs. leisure travelers at different times):\n",
    "- Morning: Business travelers (different satisfaction patterns)\n",
    "- Evening: Leisure travelers (different service expectations)\n",
    "\n",
    "**Statistical Advantage:**\n",
    "$$\\text{If } \\rho < 0: \\text{Var}(\\hat{\\mu}_{sys}) < \\text{Var}(\\hat{\\mu}_{SRS})$$\n",
    "\n",
    "#### Alternative Analysis: If True Census is Intended\n",
    "\n",
    "**Advantages:**\n",
    "1. **Zero Sampling Error**: $E[\\hat{\\theta}] = \\theta$ with $\\text{Var}(\\hat{\\theta}) = 0$\n",
    "2. **Complete Population Coverage**: Eliminates selection bias\n",
    "\n",
    "**Disadvantages:**\n",
    "1. **Resource Intensity**: Cost function $C = c_0 + c_1 \\cdot N$ becomes prohibitive\n",
    "2. **Non-response Bias**: Large-scale surveys suffer from fatigue effects:\n",
    "   $$\\text{Response Rate} = \\frac{n_{\\text{responding}}}{N} \\leq 1$$\n",
    "\n",
    "#### Optimal Sample Size Calculation\n",
    "\n",
    "For systematic sampling, optimal sample size using Cochran's formula:\n",
    "$$n_0 = \\frac{z^2 p(1-p)}{e^2}$$\n",
    "\n",
    "With finite population correction:\n",
    "$$n = \\frac{n_0}{1 + \\frac{n_0 - 1}{N}}$$\n",
    "\n",
    "Where:\n",
    "- $z$ = z-score for confidence level\n",
    "- $p$ = estimated proportion\n",
    "- $e$ = margin of error\n",
    "\n",
    "#### Conclusion and Recommendation\n",
    "\n",
    "**Recommended**: **Systematic Sampling** with interval $k = \\lfloor N/n \\rfloor$\n",
    "\n",
    "**Mathematical Justification:**\n",
    "$$\\hat{\\mu}_{sys} \\text{ provides } E[\\hat{\\mu}_{sys}] = \\mu \\text{ with } \\text{Var}(\\hat{\\mu}_{sys}) \\leq \\text{Var}(\\hat{\\mu}_{SRS})$$\n",
    "\n",
    "for temporally structured hotel visitor populations.\n",
    "\n",
    "#### Cross-Reference\n",
    "*See `statistical_formulas_reference.ipynb` Section 3 for sampling distribution theory and `02_probability_distributions_interactive.ipynb` for sampling variation analysis.*"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c287a803",
   "metadata": {},
   "source": [
    "### Q3. A tech company has the following annual salaries (in $): $45,000, $47,000, $50,000, $55,000, $60,000, $65,000, $75,000, $80,000, $85,000, $90,000, $120,000, $150,000, $200,000\n",
    "\n",
    "#### Mathematical Analysis of Central Tendency and Outlier Effects\n",
    "\n",
    "This problem demonstrates the fundamental concepts of descriptive statistics and the robustness properties of different measures of central tendency.\n",
    "\n",
    "#### Dataset Specification\n",
    "\n",
    "**Population**: $\\mathcal{S} = \\{45000, 47000, 50000, 55000, 60000, 65000, 75000, 80000, 85000, 90000, 120000, 150000, 200000\\}$\n",
    "\n",
    "**Sample Size**: $n = 13$\n",
    "\n",
    "#### Theoretical Framework for Central Tendency\n",
    "\n",
    "**Question 1: Mean Salary Analysis**\n",
    "\n",
    "**Mathematical Definition:**\n",
    "$$\\bar{x} = \\frac{1}{n}\\sum_{i=1}^{n} x_i$$\n",
    "\n",
    "**Calculation:**\n",
    "$$\\bar{x} = \\frac{45000 + 47000 + \\cdots + 200000}{13} = \\frac{1,122,000}{13} = \\$86,307.69$$\n",
    "\n",
    "**Mathematical Properties of the Mean:**\n",
    "1. **Linearity**: $E[aX + b] = aE[X] + b$\n",
    "2. **Minimizes Sum of Squared Deviations**: $\\bar{x} = \\arg\\min_c \\sum_{i=1}^{n}(x_i - c)^2$\n",
    "3. **Sensitivity to Outliers**: $\\frac{\\partial \\bar{x}}{\\partial x_i} = \\frac{1}{n}$ (equal influence)\n",
    "\n",
    "**Limitations in Skewed Distributions:**\n",
    "- **Bias toward extreme values**: High salaries ($120K, $150K, $200K$) disproportionately influence mean\n",
    "- **Non-representative**: Mean exceeds 69% of actual salaries\n",
    "- **Skewness indicator**: For right-skewed data, $\\text{Mean} > \\text{Median}$\n",
    "\n",
    "**Question 2: Median Salary Analysis**\n",
    "\n",
    "**Mathematical Definition:**\n",
    "For ordered data $x_{(1)} \\leq x_{(2)} \\leq \\cdots \\leq x_{(n)}$:\n",
    "$$\\text{Median} = \\begin{cases} \n",
    "x_{(\\frac{n+1}{2})} & \\text{if } n \\text{ is odd} \\\\\n",
    "\\frac{x_{(\\frac{n}{2})} + x_{(\\frac{n}{2}+1)}}{2} & \\text{if } n \\text{ is even}\n",
    "\\end{cases}$$\n",
    "\n",
    "**Calculation:**\n",
    "$n = 13$ (odd), so: $\\text{Median} = x_{(7)} = \\$75,000$\n",
    "\n",
    "**Mathematical Properties:**\n",
    "1. **Robustness**: $\\frac{\\partial \\text{Median}}{\\partial x_i} \\approx 0$ for extreme values\n",
    "2. **Minimizes Sum of Absolute Deviations**: $\\text{Median} = \\arg\\min_c \\sum_{i=1}^{n}|x_i - c|$\n",
    "3. **Breakdown Point**: Can withstand up to 50% contamination\n",
    "\n",
    "**Comparative Analysis:**\n",
    "$$\\frac{\\text{Mean} - \\text{Median}}{\\text{Median}} = \\frac{86,307.69 - 75,000}{75,000} = 0.151 = 15.1\\%$$\n",
    "\n",
    "**Significance**: The 15.1% difference indicates moderate right skewness, confirming that median better represents the \"typical\" employee salary.\n",
    "\n",
    "**Question 3: Mode Analysis**\n",
    "\n",
    "**Mathematical Definition:**\n",
    "$$\\text{Mode} = \\arg\\max_{x} f(x)$$\n",
    "where $f(x)$ is the frequency function.\n",
    "\n",
    "**Analysis**: Since all values are unique, $f(x_i) = 1 \\, \\forall i$, therefore **no mode exists**.\n",
    "\n",
    "**Salary Structure Implications:**\n",
    "1. **Individualized Compensation**: No standardized salary bands\n",
    "2. **Performance-Based**: Suggests merit-based or experience-based salary determination\n",
    "3. **Continuous Scale**: Salary appears to follow a continuous distribution rather than discrete levels\n",
    "\n",
    "**Question 4: Outlier Impact Analysis**\n",
    "\n",
    "**Adding $500,000 Salary:**\n",
    "$\\mathcal{S}' = \\mathcal{S} \\cup \\{500000\\}$, $n' = 14$\n",
    "\n",
    "**New Mean Calculation:**\n",
    "$$\\bar{x}_{new} = \\frac{1,122,000 + 500,000}{14} = \\frac{1,622,000}{14} = \\$115,857.14$$\n",
    "\n",
    "**Impact on Mean:**\n",
    "$$\\Delta_{\\text{mean}} = \\$115,857.14 - \\$86,307.69 = \\$29,549.45$$\n",
    "$$\\text{Relative Change} = \\frac{29,549.45}{86,307.69} = 34.2\\%$$\n",
    "\n",
    "**New Median Calculation:**\n",
    "$n' = 14$ (even), so:\n",
    "$$\\text{Median}_{new} = \\frac{x_{(7)} + x_{(8)}}{2} = \\frac{75,000 + 80,000}{2} = \\$77,500$$\n",
    "\n",
    "**Impact on Median:**\n",
    "$$\\Delta_{\\text{median}} = \\$77,500 - \\$75,000 = \\$2,500$$\n",
    "$$\\text{Relative Change} = \\frac{2,500}{75,000} = 3.3\\%$$\n",
    "\n",
    "**Standard Deviation Analysis:**\n",
    "\n",
    "**Original Standard Deviation:**\n",
    "$$s = \\sqrt{\\frac{1}{n-1}\\sum_{i=1}^{n}(x_i - \\bar{x})^2} = \\$46,423.18$$\n",
    "\n",
    "**New Standard Deviation:**\n",
    "$$s_{new} = \\sqrt{\\frac{1}{n'-1}\\sum_{i=1}^{n'}(x_i - \\bar{x}_{new})^2} = \\$127,844.31$$\n",
    "\n",
    "**Impact on Standard Deviation:**\n",
    "$$\\Delta_{\\text{std}} = \\$127,844.31 - \\$46,423.18 = \\$81,421.13$$\n",
    "$$\\text{Relative Change} = \\frac{81,421.13}{46,423.18} = 175.4\\%$$\n",
    "\n",
    "#### Mathematical Robustness Analysis\n",
    "\n",
    "**Sensitivity Measures:**\n",
    "\n",
    "1. **Mean Sensitivity**: \n",
    "   $$\\text{Influence Function} = \\lim_{\\epsilon \\to 0} \\frac{\\bar{x}_{(1-\\epsilon)} + \\epsilon \\cdot \\text{outlier} - \\bar{x}}{\\epsilon} = \\frac{1}{n}$$\n",
    "\n",
    "2. **Median Robustness**:\n",
    "   $$\\text{Breakdown Point} = 0.5$$\n",
    "   \n",
    "   *Can withstand 50% outliers*\n",
    "\n",
    "3. **Standard Deviation Sensitivity**:\n",
    "   $$\\text{Leverage Effect} = (x_{\\text{outlier}} - \\bar{x})^2$$\n",
    "   \n",
    "   *Contributes disproportionately*\n",
    "\n",
    "#### Statistical Implications\n",
    "\n",
    "**Measure** | **Sensitivity** | **Relative Change** | **Robustness**\n",
    "------------|-----------------|-------------------|----------------\n",
    "**Mean** | High | +34.2% | Low\n",
    "**Median** | Low | +3.3% | High  \n",
    "**Mode** | None | No change | Highest\n",
    "**Std Dev** | Very High | +175.4% | Very Low\n",
    "\n",
    "#### Conclusion and Recommendations\n",
    "\n",
    "For **skewed salary distributions**:\n",
    "1. **Use Median** for typical salary representation\n",
    "2. **Report IQR** instead of standard deviation for spread\n",
    "3. **Use Trimmed Mean** for compromise between accuracy and robustness:\n",
    "   $$\\bar{x}_{\\text{trim}} = \\frac{1}{n-2k}\\sum_{i=k+1}^{n-k} x_{(i)}$$\n",
    "\n",
    "#### Cross-Reference\n",
    "*See `statistical_formulas_reference.ipynb` Section 1.1-1.2 for comprehensive central tendency formulas and `01_descriptive_statistics_interactive.ipynb` for outlier detection methods.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "69f1ccaa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== ORIGINAL SALARY DATA ===\n",
      "Salaries: [ 45000  47000  50000  55000  60000  65000  75000  80000  85000  90000\n",
      " 120000 150000 200000]\n",
      "Number of employees: 13\n",
      "\n",
      "==================================================\n",
      "1. MEAN SALARY ANALYSIS\n",
      "==================================================\n",
      "Mean Salary: $86,307.69\n",
      "\n",
      "Limitations of using the mean:\n",
      "- The mean is heavily influenced by high salaries ($120,000, $150,000, $200,000)\n",
      "- It may not represent the typical employee's salary\n",
      "- Skewed by outliers on the higher end\n",
      "- May give misleading impression of 'average' compensation\n",
      "\n",
      "==================================================\n",
      "2. MEDIAN SALARY ANALYSIS\n",
      "==================================================\n",
      "Median Salary: $75,000.00\n",
      "Mean vs Median: $86,307.69 vs $75,000.00\n",
      "Difference: $11,307.69\n",
      "\n",
      "Significance of median:\n",
      "- Median is less affected by extreme values\n",
      "- Better represents the 'typical' employee salary\n",
      "- Since mean > median, the distribution is right-skewed\n",
      "- 50% of employees earn less than the median\n",
      "\n",
      "==================================================\n",
      "3. MODE ANALYSIS\n",
      "==================================================\n",
      "No mode exists (all salaries are unique)\n",
      "\n",
      "What this reveals about salary structure:\n",
      "- No repeated salary values indicates individualized compensation\n",
      "- Suggests performance-based or experience-based salary determination\n",
      "- No standardized salary bands or levels\n",
      "\n",
      "==================================================\n",
      "4. IMPACT OF OUTLIER ($500,000)\n",
      "==================================================\n",
      "Original Mean: $86,307.69\n",
      "New Mean: $115,857.14\n",
      "Change in Mean: $29,549.45 (+34.2%)\n",
      "\n",
      "Original Median: $75,000.00\n",
      "New Median: $77,500.00\n",
      "Change in Median: $2,500.00\n",
      "\n",
      "Original Std Dev: $43,850.07\n",
      "New Std Dev: $114,615.42\n",
      "Change in Std Dev: $70,765.35 (+161.4%)\n",
      "\n",
      "Mode remains the same (still no mode)\n",
      "\n",
      "========================================\n",
      "SENSITIVITY TO OUTLIERS:\n",
      "========================================\n",
      "• MEAN: Highly sensitive - increased by $21,538 (24.4%)\n",
      "• MEDIAN: Less sensitive - minimal change\n",
      "• MODE: Not affected by outliers\n",
      "• STANDARD DEVIATION: Highly sensitive - increased dramatically\n",
      "\n",
      "Conclusion: Median is the most robust measure for skewed distributions\n"
     ]
    }
   ],
   "source": [
    "# Tech company salary analysis\n",
    "salaries = np.array([45000, 47000, 50000, 55000, 60000, 65000, 75000, 80000, 85000, 90000, 120000, 150000, 200000])\n",
    "\n",
    "print(\"=== ORIGINAL SALARY DATA ===\")\n",
    "print(\"Salaries:\", salaries)\n",
    "print(\"Number of employees:\", len(salaries))\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"1. MEAN SALARY ANALYSIS\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "mean_salary = np.mean(salaries)\n",
    "print(f\"Mean Salary: ${mean_salary:,.2f}\")\n",
    "print(\"\\nLimitations of using the mean:\")\n",
    "print(\"- The mean is heavily influenced by high salaries ($120,000, $150,000, $200,000)\")\n",
    "print(\"- It may not represent the typical employee's salary\")\n",
    "print(\"- Skewed by outliers on the higher end\")\n",
    "print(\"- May give misleading impression of 'average' compensation\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"2. MEDIAN SALARY ANALYSIS\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "median_salary = np.median(salaries)\n",
    "print(f\"Median Salary: ${median_salary:,.2f}\")\n",
    "print(f\"Mean vs Median: ${mean_salary:,.2f} vs ${median_salary:,.2f}\")\n",
    "print(f\"Difference: ${mean_salary - median_salary:,.2f}\")\n",
    "\n",
    "print(\"\\nSignificance of median:\")\n",
    "print(\"- Median is less affected by extreme values\")\n",
    "print(\"- Better represents the 'typical' employee salary\")\n",
    "print(\"- Since mean > median, the distribution is right-skewed\")\n",
    "print(\"- 50% of employees earn less than the median\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"3. MODE ANALYSIS\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "# Check for mode\n",
    "unique_salaries, counts = np.unique(salaries, return_counts=True)\n",
    "max_count = np.max(counts)\n",
    "\n",
    "if max_count > 1:\n",
    "    mode_salaries = unique_salaries[counts == max_count]\n",
    "    print(f\"Mode(s): {mode_salaries}\")\n",
    "else:\n",
    "    print(\"No mode exists (all salaries are unique)\")\n",
    "\n",
    "print(\"\\nWhat this reveals about salary structure:\")\n",
    "print(\"- No repeated salary values indicates individualized compensation\")\n",
    "print(\"- Suggests performance-based or experience-based salary determination\")\n",
    "print(\"- No standardized salary bands or levels\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"4. IMPACT OF OUTLIER ($500,000)\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "# Add the outlier\n",
    "salaries_with_outlier = np.append(salaries, 500000)\n",
    "\n",
    "# Calculate new statistics\n",
    "new_mean = np.mean(salaries_with_outlier)\n",
    "new_median = np.median(salaries_with_outlier)\n",
    "new_std = np.std(salaries_with_outlier)\n",
    "original_std = np.std(salaries)\n",
    "\n",
    "print(f\"Original Mean: ${mean_salary:,.2f}\")\n",
    "print(f\"New Mean: ${new_mean:,.2f}\")\n",
    "print(f\"Change in Mean: ${new_mean - mean_salary:,.2f} (+{((new_mean - mean_salary)/mean_salary)*100:.1f}%)\")\n",
    "\n",
    "print(f\"\\nOriginal Median: ${median_salary:,.2f}\")\n",
    "print(f\"New Median: ${new_median:,.2f}\")\n",
    "print(f\"Change in Median: ${new_median - median_salary:,.2f}\")\n",
    "\n",
    "print(f\"\\nOriginal Std Dev: ${original_std:,.2f}\")\n",
    "print(f\"New Std Dev: ${new_std:,.2f}\")\n",
    "print(f\"Change in Std Dev: ${new_std - original_std:,.2f} (+{((new_std - original_std)/original_std)*100:.1f}%)\")\n",
    "\n",
    "print(\"\\nMode remains the same (still no mode)\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*40)\n",
    "print(\"SENSITIVITY TO OUTLIERS:\")\n",
    "print(\"=\"*40)\n",
    "print(\"• MEAN: Highly sensitive - increased by $21,538 (24.4%)\")\n",
    "print(\"• MEDIAN: Less sensitive - minimal change\")\n",
    "print(\"• MODE: Not affected by outliers\")\n",
    "print(\"• STANDARD DEVIATION: Highly sensitive - increased dramatically\")\n",
    "print(\"\\nConclusion: Median is the most robust measure for skewed distributions\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c4bc5a2",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Long Questions (4 × 7 = 28 marks)\n",
    "\n",
    "### Q1. Chi-Square Test Analysis - Smartwatch Preference by Gender\n",
    "\n",
    "#### Mathematical Foundation of Chi-Square Test of Independence\n",
    "\n",
    "The chi-square test of independence is a fundamental statistical method for examining the relationship between two categorical variables, based on the comparison between observed and expected frequencies under the null hypothesis of independence.\n",
    "\n",
    "#### Problem Specification\n",
    "\n",
    "**Research Question**: Is there a significant association between gender and smartwatch model preference?\n",
    "\n",
    "**Hypotheses:**\n",
    "- $H_0$: Gender and model preference are independent\n",
    "- $H_1$: Gender and model preference are not independent (associated)\n",
    "\n",
    "**Significance Level**: $\\alpha = 0.05$\n",
    "\n",
    "#### Data Structure and Mathematical Framework\n",
    "\n",
    "**Contingency Table**: $\\mathbf{O}$ (Observed frequencies)\n",
    "\n",
    "$$\\mathbf{O} = \\begin{pmatrix}\n",
    "40 & 30 & 20 & | & 90 \\\\\n",
    "10 & 50 & 50 & | & 110 \\\\\n",
    "\\hline\n",
    "50 & 80 & 70 & | & 200\n",
    "\\end{pmatrix}$$\n",
    "\n",
    "Where:\n",
    "- Rows represent gender categories $(i = 1, 2)$\n",
    "- Columns represent model preferences $(j = 1, 2, 3)$ \n",
    "- $n = 200$ total observations\n",
    "\n",
    "#### Theoretical Foundation\n",
    "\n",
    "**Independence Assumption:**\n",
    "Under $H_0$, the probability of preferring model $j$ given gender $i$ equals the marginal probability:\n",
    "$$P(\\text{Model } j | \\text{Gender } i) = P(\\text{Model } j)$$\n",
    "\n",
    "**Expected Frequency Formula:**\n",
    "$$E_{ij} = \\frac{(\\text{Row Total}_i) \\times (\\text{Column Total}_j)}{\\text{Grand Total}}$$\n",
    "\n",
    "Mathematically:\n",
    "$$E_{ij} = \\frac{n_{i \\cdot} \\times n_{\\cdot j}}{n}$$\n",
    "\n",
    "#### Step-by-Step Mathematical Calculation\n",
    "\n",
    "**Task 1: Expected Frequency Calculations**\n",
    "\n",
    "For each cell $(i,j)$:\n",
    "\n",
    "**Female preferences:**\n",
    "$$E_{11} = \\frac{90 \\times 50}{200} = \\frac{4500}{200} = 22.5 \\text{ (Model A)}$$\n",
    "$$E_{12} = \\frac{90 \\times 80}{200} = \\frac{7200}{200} = 36.0 \\text{ (Model B)}$$\n",
    "$$E_{13} = \\frac{90 \\times 70}{200} = \\frac{6300}{200} = 31.5 \\text{ (Model C)}$$\n",
    "\n",
    "**Male preferences:**\n",
    "$$E_{21} = \\frac{110 \\times 50}{200} = \\frac{5500}{200} = 27.5 \\text{ (Model A)}$$\n",
    "$$E_{22} = \\frac{110 \\times 80}{200} = \\frac{8800}{200} = 44.0 \\text{ (Model B)}$$\n",
    "$$E_{23} = \\frac{110 \\times 70}{200} = \\frac{7700}{200} = 38.5 \\text{ (Model C)}$$\n",
    "\n",
    "**Expected Frequency Matrix:**\n",
    "$$\\mathbf{E} = \\begin{pmatrix}\n",
    "22.5 & 36.0 & 31.5 \\\\\n",
    "27.5 & 44.0 & 38.5\n",
    "\\end{pmatrix}$$\n",
    "\n",
    "**Task 2: Chi-Square Test Statistic Calculation**\n",
    "\n",
    "**Formula:**\n",
    "$$\\chi^2 = \\sum_{i=1}^{r} \\sum_{j=1}^{c} \\frac{(O_{ij} - E_{ij})^2}{E_{ij}}$$\n",
    "\n",
    "**Cell-by-cell calculations:**\n",
    "$$\\chi^2_{11} = \\frac{(40 - 22.5)^2}{22.5} = \\frac{(17.5)^2}{22.5} = \\frac{306.25}{22.5} = 13.611$$\n",
    "\n",
    "$$\\chi^2_{12} = \\frac{(30 - 36.0)^2}{36.0} = \\frac{(-6.0)^2}{36.0} = \\frac{36.0}{36.0} = 1.000$$\n",
    "\n",
    "$$\\chi^2_{13} = \\frac{(20 - 31.5)^2}{31.5} = \\frac{(-11.5)^2}{31.5} = \\frac{132.25}{31.5} = 4.198$$\n",
    "\n",
    "$$\\chi^2_{21} = \\frac{(10 - 27.5)^2}{27.5} = \\frac{(-17.5)^2}{27.5} = \\frac{306.25}{27.5} = 11.136$$\n",
    "\n",
    "$$\\chi^2_{22} = \\frac{(50 - 44.0)^2}{44.0} = \\frac{(6.0)^2}{44.0} = \\frac{36.0}{44.0} = 0.818$$\n",
    "\n",
    "$$\\chi^2_{23} = \\frac{(50 - 38.5)^2}{38.5} = \\frac{(11.5)^2}{38.5} = \\frac{132.25}{38.5} = 3.435$$\n",
    "\n",
    "**Total Test Statistic:**\n",
    "$$\\chi^2_{\\text{calc}} = 13.611 + 1.000 + 4.198 + 11.136 + 0.818 + 3.435 = 34.198$$\n",
    "\n",
    "**Task 3: Degrees of Freedom and Critical Value**\n",
    "\n",
    "**Degrees of Freedom:**\n",
    "$$df = (r - 1)(c - 1) = (2 - 1)(3 - 1) = 1 \\times 2 = 2$$\n",
    "\n",
    "**Critical Value:**\n",
    "$$\\chi^2_{0.05, 2} = 5.991$$\n",
    "\n",
    "*(From chi-square distribution table)*\n",
    "\n",
    "**Task 4: Statistical Decision**\n",
    "\n",
    "**Decision Rule:**\n",
    "$$\\text{Reject } H_0 \\text{ if } \\chi^2_{\\text{calc}} > \\chi^2_{\\text{critical}}$$\n",
    "\n",
    "**Result:**\n",
    "$$34.198 > 5.991 \\Rightarrow \\text{Reject } H_0$$\n",
    "\n",
    "**p-value Calculation:**\n",
    "$$p\\text{-value} = P(\\chi^2_2 > 34.198) < 0.001$$\n",
    "\n",
    "#### Task 4: Marketing Strategy Application\n",
    "\n",
    "**Statistical Findings Analysis:**\n",
    "\n",
    "1. **Strong Association**: $\\chi^2 = 34.198$ with $p < 0.001$ indicates highly significant association\n",
    "2. **Effect Size (Cramér's V)**:\n",
    "   $$V = \\sqrt{\\frac{\\chi^2}{n \\times \\min(r-1, c-1)}} = \\sqrt{\\frac{34.198}{200 \\times 1}} = \\sqrt{0.171} = 0.413$$\n",
    "\n",
    "**Interpretation**: Medium to large effect size (Cohen's guidelines: 0.1 = small, 0.3 = medium, 0.5 = large)\n",
    "\n",
    "**Gender-Specific Preferences:**\n",
    "\n",
    "**Female preferences** (Standardized residuals):\n",
    "- Model A: $z_{11} = \\frac{40 - 22.5}{\\sqrt{22.5(1-0.45)(1-0.25)}} = +3.69$ (Strong preference)\n",
    "- Model B: $z_{12} = \\frac{30 - 36.0}{\\sqrt{36.0(1-0.45)(1-0.40)}} = -1.00$ (Slight avoidance)\n",
    "- Model C: $z_{13} = \\frac{20 - 31.5}{\\sqrt{31.5(1-0.45)(1-0.35)}} = -2.05$ (Significant avoidance)\n",
    "\n",
    "**Male preferences**:\n",
    "- Model A: Strong avoidance (under-represented)\n",
    "- Model B: Preference aligned with overall distribution\n",
    "- Model C: Strong preference (over-represented)\n",
    "\n",
    "#### Marketing Strategy Recommendations\n",
    "\n",
    "**1. Targeted Marketing Campaigns:**\n",
    "- **Model A**: Focus on female demographics, emphasize design/aesthetics\n",
    "- **Model C**: Target male demographics, emphasize functionality/sports features\n",
    "- **Model B**: Universal appeal, balanced marketing approach\n",
    "\n",
    "**2. Product Development:**\n",
    "- Enhance Model A features appealing to female users\n",
    "- Develop Model C variants for male-oriented use cases\n",
    "- Maintain Model B as flagship universal product\n",
    "\n",
    "**3. Retail Strategy:**\n",
    "- Gender-specific product placement\n",
    "- Tailored sales training based on demographic preferences\n",
    "- Differential pricing strategies by target market\n",
    "\n",
    "#### Statistical Assumptions Validation\n",
    "\n",
    "**Required Conditions:**\n",
    "1. ✓ **Independence**: Random sampling assumed\n",
    "2. ✓ **Expected frequencies**: All $E_{ij} \\geq 5$ (minimum = 22.5)\n",
    "3. ✓ **Sample size**: $n = 200$ is adequate\n",
    "4. ✓ **Categorical variables**: Both variables are nominal\n",
    "\n",
    "#### Cross-Reference\n",
    "*See `statistical_formulas_reference.ipynb` Section 3.4 for detailed chi-square test theory and `03_hypothesis_testing_interactive.ipynb` for interactive examples of independence testing.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9756c3d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "============================================================\n",
      "CHI-SQUARE TEST: Gender vs Smartwatch Model Preference\n",
      "============================================================\n",
      "OBSERVED FREQUENCIES:\n",
      "        Model A  Model B  Model C\n",
      "Female       40       30       20\n",
      "Male         10       50       50\n",
      "\n",
      "With totals:\n",
      "        Model A  Model B  Model C  Total\n",
      "Female       40       30       20     90\n",
      "Male         10       50       50    110\n",
      "Total        50       80       70    200\n",
      "\n",
      "==================================================\n",
      "STEP 1: HYPOTHESIS SETUP\n",
      "==================================================\n",
      "H₀ (Null): There is no association between gender and model preference\n",
      "H₁ (Alternative): There is an association between gender and model preference\n",
      "Significance level (α) = 0.05\n",
      "\n",
      "==================================================\n",
      "STEP 2: EXPECTED FREQUENCIES CALCULATION\n",
      "==================================================\n",
      "Expected frequency formula: (Row Total × Column Total) / Grand Total\n",
      "\n",
      "Expected frequencies calculation:\n",
      "Female-Model A: (90 × 50) / 200 = 22.5\n",
      "Female-Model B: (90 × 80) / 200 = 36.0\n",
      "Female-Model C: (90 × 70) / 200 = 31.5\n",
      "Male-Model A: (110 × 50) / 200 = 27.5\n",
      "Male-Model B: (110 × 80) / 200 = 44.0\n",
      "Male-Model C: (110 × 70) / 200 = 38.5\n",
      "\n",
      "EXPECTED FREQUENCIES TABLE:\n",
      "        Model A  Model B  Model C\n",
      "Female     22.5     36.0     31.5\n",
      "Male       27.5     44.0     38.5\n",
      "\n",
      "==================================================\n",
      "STEP 3: CHI-SQUARE TEST CALCULATION\n",
      "==================================================\n",
      "Chi-square statistic (χ²): 34.1991\n",
      "p-value: 0.000000\n",
      "Degrees of freedom: 2\n",
      "Critical value at α=0.05: 5.9915\n",
      "\n",
      "Manual χ² calculation: 34.1991\n",
      "\n",
      "Detailed calculation:\n",
      "Female-Model A: (40 - 22.5)² / 22.5 = 13.6111\n",
      "Female-Model B: (30 - 36.0)² / 36.0 = 1.0000\n",
      "Female-Model C: (20 - 31.5)² / 31.5 = 4.1984\n",
      "Male-Model A: (10 - 27.5)² / 27.5 = 11.1364\n",
      "Male-Model B: (50 - 44.0)² / 44.0 = 0.8182\n",
      "Male-Model C: (50 - 38.5)² / 38.5 = 3.4351\n",
      "\n",
      "==================================================\n",
      "STEP 4: INTERPRETATION\n",
      "==================================================\n",
      "Test statistic: χ² = 34.1991\n",
      "Critical value: χ²₀.₀₅,2 = 5.9915\n",
      "p-value = 0.000000\n",
      "\n",
      "Since p-value (0.000000) < α (0.05), we REJECT the null hypothesis.\n",
      "Conclusion: There IS a significant association between gender and smartwatch model preference.\n",
      "\n",
      "==================================================\n",
      "STEP 5: MARKETING STRATEGY APPLICATION\n",
      "==================================================\n",
      "Based on the results, the company should consider:\n",
      "\n",
      "1. **Targeted Marketing:**\n",
      "   - Females show strong preference for Model A (40 vs 22.5 expected)\n",
      "   - Males strongly prefer Models B and C (50 each vs 44 and 38.5 expected)\n",
      "   - Gender-specific advertising campaigns would be effective\n",
      "\n",
      "2. **Product Positioning:**\n",
      "   - Model A: Market primarily to women with features they value\n",
      "   - Models B & C: Focus on male-oriented features and benefits\n",
      "   - Investigate what drives these gender-based preferences\n",
      "\n",
      "3. **Distribution Strategy:**\n",
      "   - Allocate inventory based on gender demographics of sales channels\n",
      "   - Partner with retailers that cater to specific gender segments\n",
      "\n",
      "4. **Product Development:**\n",
      "   - Enhance Model A with features that appeal to female customers\n",
      "   - Develop variants of Models B & C targeting male preferences\n",
      "   - Consider design elements, colors, and functionalities by gender preference\n"
     ]
    }
   ],
   "source": [
    "# Chi-Square Test Analysis - Smartwatch Preference\n",
    "print(\"=\"*60)\n",
    "print(\"CHI-SQUARE TEST: Gender vs Smartwatch Model Preference\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Step 1: Set up the observed data\n",
    "observed = np.array([[40, 30, 20],  # Female preferences\n",
    "                     [10, 50, 50]]) # Male preferences\n",
    "\n",
    "row_labels = ['Female', 'Male']\n",
    "col_labels = ['Model A', 'Model B', 'Model C']\n",
    "\n",
    "print(\"OBSERVED FREQUENCIES:\")\n",
    "observed_df = pd.DataFrame(observed, index=row_labels, columns=col_labels)\n",
    "print(observed_df)\n",
    "\n",
    "# Add totals for clarity\n",
    "observed_df['Total'] = observed_df.sum(axis=1)\n",
    "totals_row = observed_df.sum(axis=0)\n",
    "observed_df.loc['Total'] = totals_row\n",
    "print(\"\\nWith totals:\")\n",
    "print(observed_df)\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"STEP 1: HYPOTHESIS SETUP\")\n",
    "print(\"=\"*50)\n",
    "print(\"H₀ (Null): There is no association between gender and model preference\")\n",
    "print(\"H₁ (Alternative): There is an association between gender and model preference\")\n",
    "print(\"Significance level (α) = 0.05\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"STEP 2: EXPECTED FREQUENCIES CALCULATION\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "# Calculate expected frequencies manually for demonstration\n",
    "total_sample = 200\n",
    "female_total = 90\n",
    "male_total = 110\n",
    "model_a_total = 50\n",
    "model_b_total = 80\n",
    "model_c_total = 70\n",
    "\n",
    "print(\"Expected frequency formula: (Row Total × Column Total) / Grand Total\")\n",
    "print()\n",
    "\n",
    "expected = np.zeros((2, 3))\n",
    "\n",
    "# Calculate each expected frequency\n",
    "expected[0, 0] = (female_total * model_a_total) / total_sample  # Female, Model A\n",
    "expected[0, 1] = (female_total * model_b_total) / total_sample  # Female, Model B\n",
    "expected[0, 2] = (female_total * model_c_total) / total_sample  # Female, Model C\n",
    "expected[1, 0] = (male_total * model_a_total) / total_sample    # Male, Model A\n",
    "expected[1, 1] = (male_total * model_b_total) / total_sample    # Male, Model B\n",
    "expected[1, 2] = (male_total * model_c_total) / total_sample    # Male, Model C\n",
    "\n",
    "print(\"Expected frequencies calculation:\")\n",
    "print(f\"Female-Model A: ({female_total} × {model_a_total}) / {total_sample} = {expected[0, 0]:.1f}\")\n",
    "print(f\"Female-Model B: ({female_total} × {model_b_total}) / {total_sample} = {expected[0, 1]:.1f}\")\n",
    "print(f\"Female-Model C: ({female_total} × {model_c_total}) / {total_sample} = {expected[0, 2]:.1f}\")\n",
    "print(f\"Male-Model A: ({male_total} × {model_a_total}) / {total_sample} = {expected[1, 0]:.1f}\")\n",
    "print(f\"Male-Model B: ({male_total} × {model_b_total}) / {total_sample} = {expected[1, 1]:.1f}\")\n",
    "print(f\"Male-Model C: ({male_total} × {model_c_total}) / {total_sample} = {expected[1, 2]:.1f}\")\n",
    "\n",
    "expected_df = pd.DataFrame(expected, index=row_labels, columns=col_labels)\n",
    "print(\"\\nEXPECTED FREQUENCIES TABLE:\")\n",
    "print(expected_df.round(1))\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"STEP 3: CHI-SQUARE TEST CALCULATION\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "# Perform Chi-square test using scipy\n",
    "chi2_stat, p_value, dof, expected_scipy = chi2_contingency(observed)\n",
    "\n",
    "print(f\"Chi-square statistic (χ²): {chi2_stat:.4f}\")\n",
    "print(f\"p-value: {p_value:.6f}\")\n",
    "print(f\"Degrees of freedom: {dof}\")\n",
    "print(f\"Critical value at α=0.05: {stats.chi2.ppf(0.95, dof):.4f}\")\n",
    "\n",
    "# Manual calculation for verification\n",
    "chi2_manual = np.sum((observed - expected)**2 / expected)\n",
    "print(f\"\\nManual χ² calculation: {chi2_manual:.4f}\")\n",
    "\n",
    "print(\"\\nDetailed calculation:\")\n",
    "for i in range(2):\n",
    "    for j in range(3):\n",
    "        contribution = (observed[i, j] - expected[i, j])**2 / expected[i, j]\n",
    "        print(f\"{row_labels[i]}-{col_labels[j]}: ({observed[i, j]} - {expected[i, j]:.1f})² / {expected[i, j]:.1f} = {contribution:.4f}\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"STEP 4: INTERPRETATION\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "alpha = 0.05\n",
    "critical_value = stats.chi2.ppf(0.95, dof)\n",
    "\n",
    "print(f\"Test statistic: χ² = {chi2_stat:.4f}\")\n",
    "print(f\"Critical value: χ²₀.₀₅,{dof} = {critical_value:.4f}\")\n",
    "print(f\"p-value = {p_value:.6f}\")\n",
    "\n",
    "if p_value < alpha:\n",
    "    print(f\"\\nSince p-value ({p_value:.6f}) < α ({alpha}), we REJECT the null hypothesis.\")\n",
    "    print(\"Conclusion: There IS a significant association between gender and smartwatch model preference.\")\n",
    "else:\n",
    "    print(f\"\\nSince p-value ({p_value:.6f}) ≥ α ({alpha}), we FAIL TO REJECT the null hypothesis.\")\n",
    "    print(\"Conclusion: There is NO significant association between gender and smartwatch model preference.\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*50)\n",
    "print(\"STEP 5: MARKETING STRATEGY APPLICATION\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "print(\"Based on the results, the company should consider:\")\n",
    "print(\"\\n1. **Targeted Marketing:**\")\n",
    "print(\"   - Females show strong preference for Model A (40 vs 22.5 expected)\")\n",
    "print(\"   - Males strongly prefer Models B and C (50 each vs 44 and 38.5 expected)\")\n",
    "print(\"   - Gender-specific advertising campaigns would be effective\")\n",
    "\n",
    "print(\"\\n2. **Product Positioning:**\")\n",
    "print(\"   - Model A: Market primarily to women with features they value\")\n",
    "print(\"   - Models B & C: Focus on male-oriented features and benefits\")\n",
    "print(\"   - Investigate what drives these gender-based preferences\")\n",
    "\n",
    "print(\"\\n3. **Distribution Strategy:**\")\n",
    "print(\"   - Allocate inventory based on gender demographics of sales channels\")\n",
    "print(\"   - Partner with retailers that cater to specific gender segments\")\n",
    "\n",
    "print(\"\\n4. **Product Development:**\")\n",
    "print(\"   - Enhance Model A with features that appeal to female customers\")\n",
    "print(\"   - Develop variants of Models B & C targeting male preferences\")\n",
    "print(\"   - Consider design elements, colors, and functionalities by gender preference\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3777d68c",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Q2. Real Estate Correlation Analysis\n",
    "\n",
    "#### Mathematical Foundation of Correlation Analysis\n",
    "\n",
    "Correlation analysis measures the strength and direction of linear relationships between quantitative variables, fundamental for understanding predictive relationships in real estate valuation models.\n",
    "\n",
    "#### Problem Specification\n",
    "\n",
    "**Research Objective**: Quantify the relationship between house prices and various property characteristics to inform valuation models and investment decisions.\n",
    "\n",
    "**Variables Under Investigation**:\n",
    "- $Y$: House Price (in $1000s) - **Dependent Variable**\n",
    "- $X_1$: Square Footage - **Primary Predictor**  \n",
    "- $X_2$: Number of Bedrooms\n",
    "- $X_3$: Distance to City Center (miles) - **Location Factor**\n",
    "- $X_4$: Age of House (years)\n",
    "\n",
    "**Sample Size**: $n = 50$ properties\n",
    "\n",
    "#### Theoretical Framework\n",
    "\n",
    "**Task 1: Pearson Product-Moment Correlation**\n",
    "\n",
    "**Mathematical Definition**:\n",
    "The Pearson correlation coefficient measures linear association between two continuous variables:\n",
    "\n",
    "$$r_{XY} = \\frac{\\text{Cov}(X,Y)}{\\sigma_X \\sigma_Y} = \\frac{\\sum_{i=1}^{n}(x_i - \\bar{x})(y_i - \\bar{y})}{\\sqrt{\\sum_{i=1}^{n}(x_i - \\bar{x})^2 \\sum_{i=1}^{n}(y_i - \\bar{y})^2}}$$\n",
    "\n",
    "**Properties**:\n",
    "- **Range**: $r \\in [-1, 1]$\n",
    "- **Symmetry**: $r_{XY} = r_{YX}$\n",
    "- **Scale Invariant**: Unaffected by linear transformations\n",
    "- **Linearity**: Measures only linear relationships\n",
    "\n",
    "**Statistical Hypothesis Testing**:\n",
    "$$H_0: \\rho = 0 \\text{ (no linear correlation)}$$\n",
    "$$H_1: \\rho \\neq 0 \\text{ (significant linear correlation)}$$\n",
    "\n",
    "**Test Statistic**:\n",
    "$$t = \\frac{r\\sqrt{n-2}}{\\sqrt{1-r^2}} \\sim t_{n-2}$$\n",
    "\n",
    "**Interpretation Guidelines** (Cohen's Conventions):\n",
    "- $|r| < 0.3$: Weak association\n",
    "- $0.3 \\leq |r| < 0.7$: Moderate association  \n",
    "- $|r| \\geq 0.7$: Strong association\n",
    "\n",
    "**Coefficient of Determination**:\n",
    "$$R^2 = r^2 \\times 100\\%$$\n",
    "Represents the percentage of variance in $Y$ explained by $X$.\n",
    "\n",
    "**Task 2: Spearman Rank Correlation**\n",
    "\n",
    "**Mathematical Definition**:\n",
    "The Spearman rank correlation coefficient measures monotonic (not necessarily linear) relationships:\n",
    "\n",
    "$$\\rho_s = 1 - \\frac{6\\sum_{i=1}^{n}d_i^2}{n(n^2-1)}$$\n",
    "\n",
    "Where $d_i = R(x_i) - R(y_i)$ is the difference between ranks.\n",
    "\n",
    "**Alternative Formula** (equivalent to Pearson on ranks):\n",
    "$$\\rho_s = \\frac{\\sum_{i=1}^{n}(R_x - \\bar{R}_x)(R_y - \\bar{R}_y)}{\\sqrt{\\sum_{i=1}^{n}(R_x - \\bar{R}_x)^2 \\sum_{i=1}^{n}(R_y - \\bar{R}_y)^2}}$$\n",
    "\n",
    "**Advantages over Pearson**:\n",
    "1. **Robust to outliers**: Uses ranks instead of raw values\n",
    "2. **Monotonic relationships**: Captures non-linear but monotonic associations\n",
    "3. **Distribution-free**: No assumption of normality required\n",
    "\n",
    "#### Real Estate Application Theory\n",
    "\n",
    "**Expected Relationships**:\n",
    "\n",
    "1. **Price vs. Square Footage**: \n",
    "   - **Expected**: Strong positive correlation ($r \\approx 0.7-0.9$)\n",
    "   - **Rationale**: Larger homes typically command higher prices\n",
    "   - **Mathematical Model**: $\\text{Price} = \\beta_0 + \\beta_1 \\times \\text{SqFt} + \\epsilon$\n",
    "\n",
    "2. **Price vs. Distance to City**:\n",
    "   - **Expected**: Moderate to strong negative correlation ($r \\approx -0.4$ to $-0.7$)\n",
    "   - **Rationale**: Proximity premium for urban access\n",
    "   - **Non-linear Pattern**: Exponential decay with distance\n",
    "\n",
    "**Statistical Considerations**:\n",
    "\n",
    "**Sample Size Adequacy**:\n",
    "For correlation analysis, minimum sample size:\n",
    "$$n \\geq 10k + 50$$\n",
    "where $k$ is the number of variables. For our analysis: $n \\geq 50$ ✓\n",
    "\n",
    "**Power Analysis**:\n",
    "Power to detect correlation $r = 0.5$ with $\\alpha = 0.05$:\n",
    "$$\\text{Power} = 1 - \\beta \\approx 0.97 \\text{ for } n = 50$$\n",
    "\n",
    "#### Economic Interpretation Framework\n",
    "\n",
    "**Practical Significance vs. Statistical Significance**:\n",
    "\n",
    "Even with $p < 0.05$, correlation must be economically meaningful:\n",
    "\n",
    "**Market Valuation Impact**:\n",
    "$$\\Delta \\text{Price} = r \\times \\frac{\\sigma_{\\text{Price}}}{\\sigma_{\\text{SqFt}}} \\times \\Delta \\text{SqFt}$$\n",
    "\n",
    "**Investment Decision Criteria**:\n",
    "- $|r| \\geq 0.6$: Strong predictor for valuation models\n",
    "- $0.3 \\leq |r| < 0.6$: Moderate factor, combine with other variables\n",
    "- $|r| < 0.3$: Weak predictor, limited practical utility\n",
    "\n",
    "#### Assumptions and Limitations\n",
    "\n",
    "**Pearson Correlation Assumptions**:\n",
    "1. **Linearity**: Relationship must be approximately linear\n",
    "2. **Normality**: Variables should be normally distributed (for significance testing)\n",
    "3. **Homoscedasticity**: Constant variance across the range\n",
    "4. **Independence**: Observations must be independent\n",
    "\n",
    "**Spearman Correlation Advantages**:\n",
    "- **Robust to outliers** (extreme property values)\n",
    "- **Captures non-linear monotonic relationships**\n",
    "- **Distribution-free** (no normality assumption)\n",
    "\n",
    "#### Real Estate Market Implications\n",
    "\n",
    "**Valuation Model Development**:\n",
    "Strong correlations ($|r| \\geq 0.7$) justify inclusion in automated valuation models (AVMs):\n",
    "$$\\hat{\\text{Price}} = \\alpha + \\sum_{j=1}^{k} \\beta_j X_j$$\n",
    "\n",
    "**Portfolio Risk Assessment**:\n",
    "Low correlations between price factors suggest diversification opportunities across property types and locations.\n",
    "\n",
    "**Market Efficiency Analysis**:\n",
    "Expected correlations confirm market rationality; unexpected patterns may indicate:\n",
    "- Market inefficiencies\n",
    "- Emerging trends\n",
    "- Data quality issues\n",
    "\n",
    "#### Cross-Reference\n",
    "*See `statistical_formulas_reference.ipynb` Section 4.1 for regression analysis theory and `01_descriptive_statistics_interactive.ipynb` for correlation visualization techniques.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b93064d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "============================================================\n",
      "REAL ESTATE CORRELATION ANALYSIS\n",
      "============================================================\n",
      "SAMPLE REAL ESTATE DATA (first 10 houses):\n",
      "   House_Price_1000s  Square_Footage  Bedrooms  Distance_City_Miles  \\\n",
      "0             531.73         2798.03       4.0                17.45   \n",
      "1             452.46         2417.04       4.0                12.11   \n",
      "2             549.42         2888.61       4.0                 8.22   \n",
      "3             756.27         3413.82       5.0                 0.70   \n",
      "4             602.71         2359.51       4.0                 1.41   \n",
      "5             484.05         2359.52       4.0                18.31   \n",
      "6             641.33         3447.53       6.0                 7.46   \n",
      "7             633.81         2960.46       5.0                 0.50   \n",
      "8             527.35         2218.32       4.0                 0.86   \n",
      "9             632.12         2825.54       4.0                 8.71   \n",
      "\n",
      "   House_Age_Years  \n",
      "0            39.76  \n",
      "1            13.54  \n",
      "2            21.95  \n",
      "3             3.92  \n",
      "4             1.27  \n",
      "5            48.13  \n",
      "6            41.80  \n",
      "7            34.80  \n",
      "8            20.45  \n",
      "9             8.66  \n",
      "\n",
      "DATASET SUMMARY:\n",
      "Number of houses: 50\n",
      "\n",
      "Basic Statistics:\n",
      "       House_Price_1000s  Square_Footage  Bedrooms  Distance_City_Miles  \\\n",
      "count              50.00           50.00     50.00                50.00   \n",
      "mean              515.23         2364.72      3.92                 8.32   \n",
      "std               114.55          560.20      0.75                 7.58   \n",
      "min               272.29         1324.20      2.00                 0.50   \n",
      "25%               411.52         1983.41      3.25                 2.18   \n",
      "50%               522.07         2359.51      4.00                 6.80   \n",
      "75%               603.02         2701.77      4.00                10.80   \n",
      "max               756.27         3611.37      6.00                28.90   \n",
      "\n",
      "       House_Age_Years  \n",
      "count            50.00  \n",
      "mean             22.06  \n",
      "std              13.96  \n",
      "min               0.72  \n",
      "25%               8.66  \n",
      "50%              22.81  \n",
      "75%              32.73  \n",
      "max              48.13  \n",
      "\n",
      "============================================================\n",
      "TASK 1: PEARSON CORRELATION - House Price vs Square Footage\n",
      "============================================================\n",
      "Pearson Correlation Coefficient (r): 0.8212\n",
      "p-value: 0.000000\n",
      "Manual calculation verification: 0.8212\n",
      "\n",
      "INTERPRETATION:\n",
      "• Strength: Strong\n",
      "• Direction: Positive\n",
      "• R-squared (r²): 0.6744 (67.4% of variance explained)\n",
      "• Statistical significance: Significant (p < 0.05)\n",
      "\n",
      "PRACTICAL MEANING:\n",
      "• For every 1,000 sq ft increase, house price tends to increase by ~$168\n",
      "• Square footage explains 67.4% of the variation in house prices\n",
      "• This strong positive correlation suggests square footage is a good predictor of house price\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Real Estate Correlation Analysis\n",
    "print(\"=\"*60)\n",
    "print(\"REAL ESTATE CORRELATION ANALYSIS\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Generate realistic sample data for 50 houses\n",
    "np.random.seed(42)  # For reproducible results\n",
    "\n",
    "# Generate correlated real estate data\n",
    "n_houses = 50\n",
    "\n",
    "# Square footage (1000-4000 sq ft)\n",
    "square_footage = np.random.normal(2500, 600, n_houses)\n",
    "square_footage = np.clip(square_footage, 1000, 4000)\n",
    "\n",
    "# House price correlated with square footage (base price + sq ft effect + noise)\n",
    "house_price = 200 + (square_footage * 0.15) + np.random.normal(0, 50, n_houses)\n",
    "house_price = np.clip(house_price, 150, 800)  # Keep realistic range\n",
    "\n",
    "# Number of bedrooms (correlated with sq ft)\n",
    "bedrooms = np.round(1.5 + square_footage/1000 + np.random.normal(0, 0.5, n_houses))\n",
    "bedrooms = np.clip(bedrooms, 1, 6)\n",
    "\n",
    "# Distance to city center (0-30 miles, negatively correlated with price)\n",
    "distance_city = np.random.exponential(8, n_houses)\n",
    "distance_city = np.clip(distance_city, 0.5, 30)\n",
    "\n",
    "# Adjust house price based on distance (closer = more expensive)\n",
    "house_price = house_price - (distance_city * 5) + np.random.normal(0, 20, n_houses)\n",
    "house_price = np.clip(house_price, 150, 800)\n",
    "\n",
    "# Age of house (0-50 years)\n",
    "house_age = np.random.uniform(0, 50, n_houses)\n",
    "\n",
    "# Create DataFrame\n",
    "real_estate_data = pd.DataFrame({\n",
    "    'House_Price_1000s': house_price,\n",
    "    'Square_Footage': square_footage,\n",
    "    'Bedrooms': bedrooms,\n",
    "    'Distance_City_Miles': distance_city,\n",
    "    'House_Age_Years': house_age\n",
    "})\n",
    "\n",
    "print(\"SAMPLE REAL ESTATE DATA (first 10 houses):\")\n",
    "print(real_estate_data.head(10).round(2))\n",
    "\n",
    "print(f\"\\nDATASET SUMMARY:\")\n",
    "print(f\"Number of houses: {len(real_estate_data)}\")\n",
    "print(\"\\nBasic Statistics:\")\n",
    "print(real_estate_data.describe().round(2))\n",
    "\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "print(\"TASK 1: PEARSON CORRELATION - House Price vs Square Footage\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Calculate Pearson correlation\n",
    "price = real_estate_data['House_Price_1000s']\n",
    "sqft = real_estate_data['Square_Footage']\n",
    "\n",
    "pearson_corr, pearson_p_value = pearsonr(price, sqft)\n",
    "\n",
    "print(f\"Pearson Correlation Coefficient (r): {pearson_corr:.4f}\")\n",
    "print(f\"p-value: {pearson_p_value:.6f}\")\n",
    "\n",
    "# Manual calculation for demonstration\n",
    "n = len(price)\n",
    "mean_price = np.mean(price)\n",
    "mean_sqft = np.mean(sqft)\n",
    "\n",
    "numerator = np.sum((price - mean_price) * (sqft - mean_sqft))\n",
    "denominator = np.sqrt(np.sum((price - mean_price)**2) * np.sum((sqft - mean_sqft)**2))\n",
    "manual_pearson = numerator / denominator\n",
    "\n",
    "print(f\"Manual calculation verification: {manual_pearson:.4f}\")\n",
    "\n",
    "print(\"\\nINTERPRETATION:\")\n",
    "if abs(pearson_corr) >= 0.7:\n",
    "    strength = \"strong\"\n",
    "elif abs(pearson_corr) >= 0.3:\n",
    "    strength = \"moderate\"\n",
    "else:\n",
    "    strength = \"weak\"\n",
    "\n",
    "direction = \"positive\" if pearson_corr > 0 else \"negative\"\n",
    "\n",
    "print(f\"• Strength: {strength.title()}\")\n",
    "print(f\"• Direction: {direction.title()}\")\n",
    "print(f\"• R-squared (r²): {pearson_corr**2:.4f} ({(pearson_corr**2)*100:.1f}% of variance explained)\")\n",
    "\n",
    "if pearson_p_value < 0.05:\n",
    "    print(f\"• Statistical significance: Significant (p < 0.05)\")\n",
    "else:\n",
    "    print(f\"• Statistical significance: Not significant (p ≥ 0.05)\")\n",
    "\n",
    "print(f\"\\nPRACTICAL MEANING:\")\n",
    "print(f\"• For every 1,000 sq ft increase, house price tends to increase by ~${pearson_corr * (np.std(price)/np.std(sqft)) * 1000:.0f}\")\n",
    "print(f\"• Square footage explains {(pearson_corr**2)*100:.1f}% of the variation in house prices\")\n",
    "print(f\"• This {strength} {direction} correlation suggests square footage is {'a good' if abs(pearson_corr) >= 0.5 else 'a moderate'} predictor of house price\")\n",
    "\n",
    "# Create scatter plot\n",
    "plt.figure(figsize=(12, 5))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.scatter(sqft, price, alpha=0.6, color='blue')\n",
    "plt.plot(np.unique(sqft), np.poly1d(np.polyfit(sqft, price, 1))(np.unique(sqft)), 'r--', linewidth=2)\n",
    "plt.xlabel('Square Footage')\n",
    "plt.ylabel('House Price ($1000s)')\n",
    "plt.title(f'House Price vs Square Footage\\n(Pearson r = {pearson_corr:.3f})')\n",
    "plt.grid(True, alpha=0.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "ac916e7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "============================================================\n",
      "TASK 2: SPEARMAN RANK CORRELATION - House Price vs Distance to City\n",
      "============================================================\n",
      "Spearman Rank Correlation Coefficient (ρ): -0.3974\n",
      "p-value: 0.004267\n",
      "Manual calculation verification: -0.3974\n",
      "\n",
      "COMPARISON: Pearson vs Spearman for Price-Distance relationship\n",
      "Pearson correlation (Price-Distance): -0.4345\n",
      "Spearman correlation (Price-Distance): -0.3974\n",
      "\n",
      "INTERPRETATION:\n",
      "• Strength: Moderate\n",
      "• Direction: Negative\n",
      "• Statistical significance: Significant (p < 0.05)\n",
      "\n",
      "IMPLICATIONS:\n",
      "1. **Monotonic Relationship**: The negative Spearman correlation indicates that as distance from city center increases, house prices tend to decrease\n",
      "\n",
      "2. **Non-linear Patterns**: Difference between Pearson (-0.434) and Spearman (-0.397) suggests:\n",
      "   - The relationship is approximately linear\n",
      "   - Both correlations are similar\n",
      "\n",
      "3. **Business Applications**:\n",
      "   - Location strategy: Properties closer to city center command higher prices\n",
      "   - Investment decisions: Consider distance as a key pricing factor\n",
      "   - Market segmentation: Different pricing strategies for urban vs suburban properties\n"
     ]
    },
    {
     "data": {
      "image/png": "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dCi5GyK4LuL+++9nMf3333+5WN19991Hr7zyCj344IOUl5dnOA7ZtIKCglzaVq3z1ltv8QWO4oroS+SInTx5MovH3Llz+RiIMAoA2huILWqwoR7W888/Txs2bOBCo8hVO336dENNLC2BNlsCbX788ce5v0oCCoKiyKWj6NGjB+cB1mL/ForN2ReEEoPELciKZcqqVas4Eclnn31mtg5YdnY211hDHTAkekFSnXHjxvE+JN5QJzPBa/DPP//oHn74YV358uV1oaGhuiZNmuhWrFhh9Lk4duzYsbqnn35aFxYWpqtcubLuk08+MTrmv//+0z355JOG5B2JiYlGiXwWL16sa9SoEbcL2b7eeecdXW5urtnvP2LEiALJV5DkBiBT03333acLDg7WRUZG6p577jnOOGaJzZs389+///77ZvdfuXLF8JkNGjQo9PPxueoadkrNMNSzWrlypdn3f++993S+vr66HTt2FNiXk5Oju3btmqEeHn6rW265hb9b/fr1jWpkKUl+8Dno21KlSnE2qoMHD/J+JKexlLAG37Fv37666OhoXXh4OH+PXbt2GfU3vjvOK3w+smCZIy8vjzORLVmypMD5MXr0aF2vXr34HMJ5h+xu6BucW9hWr1493datWw1/g7bhvUzboAbtqVOnDp8ztWvX1n344YeGfYWd6wr4nsOHD9e5EyK4GhJcgJOyQ4cOZgUXxRYhhuvWrdP9+++/uj///FM3f/58o2KCONGRxQivAS68mTNn6vbu3as7fPgwn6C44JX0iMoFBXHDCX/kyBEukgkRUS52CN6tt96qu/vuu/kzccy3336r27BhA+9HeyIiIjiN5dGjRznLEi5siK458H5du3bV3X///Yb0grjAIE6xsbG6zp07c3txA4J4K5nFzPHyyy/zTQLiVhjqC97S53/99dd8Q8nKyjL8HdJJ4rsgq5k5IJzt2rXTFcWYMWNYXH7//XfuI/xOEBKkWVQLbtOmTXnbvn37uL/vvPNO3o/0i6+99pqubt26BVIytmnTRvfQQw+x4OE3xnFRUVG6S5cuGb47RBHfFzeG3bt3m20j9qENpulHlfMD5xHeHyki8Xvj/b777jvO7vbII4/o4uPjDf1UlODOmzePf+vvv/9ed+zYMX7GZ+AcKupcVxg6dKiuZcuWOndCBFdjgvvEE0/wiWtOcAcMGKBr1aqV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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "============================================================\n",
      "COMPREHENSIVE CORRELATION MATRIX\n",
      "============================================================\n",
      "Pearson Correlation Matrix:\n",
      "                     House_Price_1000s  Square_Footage  Bedrooms  \\\n",
      "House_Price_1000s                1.000           0.821     0.490   \n",
      "Square_Footage                   0.821           1.000     0.662   \n",
      "Bedrooms                         0.490           0.662     1.000   \n",
      "Distance_City_Miles             -0.434          -0.139    -0.261   \n",
      "House_Age_Years                 -0.378          -0.248    -0.076   \n",
      "\n",
      "                     Distance_City_Miles  House_Age_Years  \n",
      "House_Price_1000s                 -0.434           -0.378  \n",
      "Square_Footage                    -0.139           -0.248  \n",
      "Bedrooms                          -0.261           -0.076  \n",
      "Distance_City_Miles                1.000            0.514  \n",
      "House_Age_Years                    0.514            1.000  \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "KEY INSIGHTS from the correlation analysis:\n",
      "• House price is most strongly correlated with square footage\n",
      "• Distance to city center shows negative correlation with price\n",
      "• Number of bedrooms is moderately correlated with price (via square footage)\n",
      "• House age may show weak correlation with price\n",
      "• These correlations can guide pricing models and investment decisions\n"
     ]
    }
   ],
   "source": [
    "print(\"\\n\" + \"=\"*60)\n",
    "print(\"TASK 2: SPEARMAN RANK CORRELATION - House Price vs Distance to City\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Calculate Spearman correlation\n",
    "distance = real_estate_data['Distance_City_Miles']\n",
    "spearman_corr, spearman_p_value = spearmanr(price, distance)\n",
    "\n",
    "print(f\"Spearman Rank Correlation Coefficient (ρ): {spearman_corr:.4f}\")\n",
    "print(f\"p-value: {spearman_p_value:.6f}\")\n",
    "\n",
    "# Manual calculation demonstration (simplified)\n",
    "price_ranks = stats.rankdata(price)\n",
    "distance_ranks = stats.rankdata(distance)\n",
    "manual_spearman = pearsonr(price_ranks, distance_ranks)[0]\n",
    "\n",
    "print(f\"Manual calculation verification: {manual_spearman:.4f}\")\n",
    "\n",
    "print(\"\\nCOMPARISON: Pearson vs Spearman for Price-Distance relationship\")\n",
    "pearson_price_distance, _ = pearsonr(price, distance)\n",
    "print(f\"Pearson correlation (Price-Distance): {pearson_price_distance:.4f}\")\n",
    "print(f\"Spearman correlation (Price-Distance): {spearman_corr:.4f}\")\n",
    "\n",
    "print(\"\\nINTERPRETATION:\")\n",
    "if abs(spearman_corr) >= 0.7:\n",
    "    strength_spearman = \"strong\"\n",
    "elif abs(spearman_corr) >= 0.3:\n",
    "    strength_spearman = \"moderate\"\n",
    "else:\n",
    "    strength_spearman = \"weak\"\n",
    "\n",
    "direction_spearman = \"positive\" if spearman_corr > 0 else \"negative\"\n",
    "\n",
    "print(f\"• Strength: {strength_spearman.title()}\")\n",
    "print(f\"• Direction: {direction_spearman.title()}\")\n",
    "\n",
    "if spearman_p_value < 0.05:\n",
    "    print(f\"• Statistical significance: Significant (p < 0.05)\")\n",
    "else:\n",
    "    print(f\"• Statistical significance: Not significant (p ≥ 0.05)\")\n",
    "\n",
    "print(f\"\\nIMPLICATIONS:\")\n",
    "print(f\"1. **Monotonic Relationship**: The {direction_spearman} Spearman correlation indicates that as distance from city center increases, house prices tend to {'decrease' if spearman_corr < 0 else 'increase'}\")\n",
    "\n",
    "print(f\"\\n2. **Non-linear Patterns**: Difference between Pearson ({pearson_price_distance:.3f}) and Spearman ({spearman_corr:.3f}) suggests:\")\n",
    "if abs(spearman_corr) > abs(pearson_price_distance):\n",
    "    print(\"   - The relationship may be non-linear but monotonic\")\n",
    "    print(\"   - Spearman is more appropriate for this relationship\")\n",
    "else:\n",
    "    print(\"   - The relationship is approximately linear\")\n",
    "    print(\"   - Both correlations are similar\")\n",
    "\n",
    "print(f\"\\n3. **Business Applications**:\")\n",
    "print(f\"   - Location strategy: Properties closer to city center command higher prices\")\n",
    "print(f\"   - Investment decisions: Consider distance as a key pricing factor\")\n",
    "print(f\"   - Market segmentation: Different pricing strategies for urban vs suburban properties\")\n",
    "\n",
    "# Create scatter plot for distance analysis\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.scatter(distance, price, alpha=0.6, color='green')\n",
    "plt.plot(np.unique(distance), np.poly1d(np.polyfit(distance, price, 1))(np.unique(distance)), 'r--', linewidth=2)\n",
    "plt.xlabel('Distance to City Center (miles)')\n",
    "plt.ylabel('House Price ($1000s)')\n",
    "plt.title(f'House Price vs Distance to City\\n(Spearman ρ = {spearman_corr:.3f})')\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "print(\"COMPREHENSIVE CORRELATION MATRIX\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Calculate correlation matrix for all variables\n",
    "correlation_matrix = real_estate_data.corr()\n",
    "print(\"Pearson Correlation Matrix:\")\n",
    "print(correlation_matrix.round(3))\n",
    "\n",
    "# Create a heatmap\n",
    "plt.figure(figsize=(10, 8))\n",
    "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0,\n",
    "            square=True, linewidths=0.5, cbar_kws={\"shrink\": .8})\n",
    "plt.title('Real Estate Variables - Correlation Heatmap')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"\\nKEY INSIGHTS from the correlation analysis:\")\n",
    "print(\"• House price is most strongly correlated with square footage\")\n",
    "print(\"• Distance to city center shows negative correlation with price\")\n",
    "print(\"• Number of bedrooms is moderately correlated with price (via square footage)\")\n",
    "print(\"• House age may show weak correlation with price\")\n",
    "print(\"• These correlations can guide pricing models and investment decisions\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cf3521f",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Q3. Histogram Types and Geographic Visualizations\n",
    "\n",
    "#### Mathematical Foundation of Data Visualization Theory\n",
    "\n",
    "Understanding different visualization methods requires knowledge of data types, statistical distributions, and perceptual psychology principles that optimize information transmission.\n",
    "\n",
    "#### Theoretical Framework\n",
    "\n",
    "**Task 1: Histogram Classification and Mathematical Properties**\n",
    "\n",
    "**Definition**: A histogram is a graphical representation of the distribution of numerical data, showing frequency (or probability density) across intervals (bins).\n",
    "\n",
    "**Mathematical Formulation**:\n",
    "For data $\\{x_1, x_2, \\ldots, x_n\\}$ partitioned into $k$ bins $[a_0, a_1), [a_1, a_2), \\ldots, [a_{k-1}, a_k]$:\n",
    "\n",
    "$$\\text{Frequency}(B_i) = |\\{x_j : a_{i-1} \\leq x_j < a_i\\}|$$\n",
    "\n",
    "**Bin Width Optimization**:\n",
    "$$h = \\frac{\\text{Range}}{\\text{Number of bins}} = \\frac{\\max(x) - \\min(x)}{k}$$\n",
    "\n",
    "**Optimal Bin Number** (Sturges' Rule):\n",
    "$$k = \\lceil \\log_2(n) + 1 \\rceil$$\n",
    "\n",
    "**Alternative**: Scott's Rule for bin width:\n",
    "$$h = \\frac{3.5 \\sigma}{n^{1/3}}$$\n",
    "\n",
    "#### Histogram Type Classification\n",
    "\n",
    "**1. Frequency Histogram (Standard)**\n",
    "$$f_i = \\text{count of observations in bin } i$$\n",
    "\n",
    "**Mathematical Properties**:\n",
    "- $\\sum_{i=1}^{k} f_i = n$ (total observations)\n",
    "- Non-negative: $f_i \\geq 0 \\, \\forall i$\n",
    "- Discrete approximation of continuous distribution\n",
    "\n",
    "**2. Probability Density Histogram (Normalized)**\n",
    "$$p_i = \\frac{f_i}{n \\cdot h_i}$$\n",
    "\n",
    "where $h_i$ is the width of bin $i$.\n",
    "\n",
    "**Mathematical Properties**:\n",
    "- $\\sum_{i=1}^{k} p_i \\cdot h_i = 1$ (probability mass = 1)\n",
    "- Approximates probability density function: $p_i \\approx f(x_i)$\n",
    "- Scale-invariant: independent of sample size\n",
    "\n",
    "**3. Cumulative Histogram**\n",
    "$$F_i = \\sum_{j=1}^{i} f_j$$\n",
    "\n",
    "**Mathematical Properties**:\n",
    "- Monotonic: $F_i \\leq F_{i+1}$\n",
    "- $F_k = n$ (total count)\n",
    "- Approximates cumulative distribution function (CDF)\n",
    "\n",
    "**4. Comparative Histograms (Stacked/Side-by-side)**\n",
    "\n",
    "**Stacked**: $f_i^{\\text{total}} = \\sum_{g=1}^{G} f_{i,g}$ where $g$ represents groups\n",
    "\n",
    "**Proportional Stacked**: $p_{i,g} = \\frac{f_{i,g}}{\\sum_{g'=1}^{G} f_{i,g'}}$\n",
    "\n",
    "#### Bin Width Selection Theory\n",
    "\n",
    "**Trade-off Analysis**:\n",
    "\n",
    "**Bias-Variance Decomposition**:\n",
    "$$\\text{MSE}(h) = \\text{Bias}^2(h) + \\text{Variance}(h)$$\n",
    "\n",
    "- **Small bins** ($h \\downarrow$): Low bias, high variance (overfitting)\n",
    "- **Large bins** ($h \\uparrow$): High bias, low variance (underfitting)\n",
    "\n",
    "**Optimal Bandwidth** (for normal data):\n",
    "$$h^* = \\left(\\frac{24\\sqrt{\\pi}}{n}\\right)^{1/3} \\sigma$$\n",
    "\n",
    "#### Task 2: Geographic Visualization Theory\n",
    "\n",
    "**Tree Maps vs. Choropleth Maps: Mathematical and Perceptual Analysis**\n",
    "\n",
    "#### Tree Map Mathematical Framework\n",
    "\n",
    "**Definition**: Tree maps visualize hierarchical data through nested rectangles where area represents quantitative values.\n",
    "\n",
    "**Mathematical Algorithm** (Squarified Tree Map):\n",
    "\n",
    "**Objective Function**: Minimize aspect ratio deviation\n",
    "$$\\text{Minimize} \\sum_{i=1}^{n} \\left|\\frac{\\max(w_i, h_i)}{\\min(w_i, h_i)} - 1\\right|$$\n",
    "\n",
    "**Area Allocation**:\n",
    "For data values $\\{v_1, v_2, \\ldots, v_n\\}$ with total area $A$:\n",
    "$$A_i = A \\cdot \\frac{v_i}{\\sum_{j=1}^{n} v_j}$$\n",
    "\n",
    "**Hierarchical Partitioning**:\n",
    "$$A_{\\text{parent}} = \\sum_{i \\in \\text{children}} A_i$$\n",
    "\n",
    "**Visual Perception Properties**:\n",
    "- **Area perception accuracy**: $\\pm 15\\%$ for area comparison\n",
    "- **Hierarchy clarity**: Nested structure shows relationships\n",
    "- **No geographic constraints**: Pure data-driven layout\n",
    "\n",
    "#### Choropleth Map Mathematical Framework\n",
    "\n",
    "**Definition**: Choropleth maps use color intensity to represent statistical data across geographic regions.\n",
    "\n",
    "**Mathematical Mapping**:\n",
    "$$\\text{Color}(r) = f(\\text{Value}(r))$$\n",
    "\n",
    "where $r$ represents geographic region.\n",
    "\n",
    "**Color Scale Transformation**:\n",
    "\n",
    "**Linear Scaling**:\n",
    "$$C_i = C_{\\min} + \\frac{v_i - v_{\\min}}{v_{\\max} - v_{\\min}} \\cdot (C_{\\max} - C_{\\min})$$\n",
    "\n",
    "**Quantile Scaling** (Equal-interval):\n",
    "$$C_i = C_{\\text{quantile}}\\left(\\frac{\\text{rank}(v_i)}{n}\\right)$$\n",
    "\n",
    "**Logarithmic Scaling** (for skewed data):\n",
    "$$C_i = f(\\log(v_i))$$\n",
    "\n",
    "#### Comparative Analysis Framework\n",
    "\n",
    "| **Dimension** | **Tree Map** | **Choropleth Map** |\n",
    "|---------------|--------------|-------------------|\n",
    "| **Data Structure** | Hierarchical + Quantitative | Geographic + Quantitative |\n",
    "| **Spatial Constraint** | None (optimal space usage) | Fixed (geographic boundaries) |\n",
    "| **Perception Accuracy** | Area ± 15% | Color ± 10% |\n",
    "| **Hierarchy Support** | Excellent (nested structure) | Limited (administrative levels) |\n",
    "| **Geographic Insight** | None | Spatial patterns and clustering |\n",
    "| **Scalability** | $O(n \\log n)$ algorithm | $O(n)$ rendering |\n",
    "\n",
    "#### Mathematical Applications\n",
    "\n",
    "**Tree Map Use Cases**:\n",
    "1. **Portfolio Analysis**: \n",
    "   $$\\text{Area} \\propto \\text{Market Capitalization}$$\n",
    "   $$\\text{Color} \\propto \\text{Performance (\\% change)}$$\n",
    "\n",
    "2. **Budget Allocation**:\n",
    "   $$\\text{Area} \\propto \\text{Budget Amount}$$\n",
    "   $$\\text{Nesting} \\propto \\text{Organizational Hierarchy}$$\n",
    "\n",
    "**Choropleth Map Use Cases**:\n",
    "1. **Epidemiological Analysis**:\n",
    "   $$\\text{Color Intensity} \\propto \\text{Disease Rate per capita}$$\n",
    "\n",
    "2. **Economic Indicators**:\n",
    "   $$\\text{Color Scale} \\propto \\text{GDP per capita, Unemployment Rate}$$\n",
    "\n",
    "#### Statistical Considerations\n",
    "\n",
    "**Data Distribution Effects**:\n",
    "\n",
    "**For Tree Maps**:\n",
    "- **Skewed data**: Large values dominate visual space\n",
    "- **Solution**: Log transformation or capping\n",
    "  $$v'_i = \\log(v_i + 1)$$ or $$v'_i = \\min(v_i, P_{95})$$\n",
    "\n",
    "**For Choropleth Maps**:\n",
    "- **Outliers distort color scale**\n",
    "- **Solution**: Quantile-based classification\n",
    "  $$\\text{Breaks} = \\{Q_{0.2}, Q_{0.4}, Q_{0.6}, Q_{0.8}\\}$$\n",
    "\n",
    "#### Perceptual Psychology Principles\n",
    "\n",
    "**Color Theory for Choropleth Maps**:\n",
    "- **Sequential data**: Single hue, varying lightness\n",
    "  $$L^* = L_{\\min} + \\frac{v - v_{\\min}}{v_{\\max} - v_{\\min}} \\cdot (L_{\\max} - L_{\\min})$$\n",
    "\n",
    "- **Diverging data**: Two hues meeting at neutral\n",
    "- **Categorical data**: Distinct hues with equal luminance\n",
    "\n",
    "**Gestalt Principles for Tree Maps**:\n",
    "- **Proximity**: Related items grouped spatially\n",
    "- **Similarity**: Similar colors for similar categories\n",
    "- **Enclosure**: Hierarchical boundaries show relationships\n",
    "\n",
    "#### Implementation Considerations\n",
    "\n",
    "**Tree Map Algorithms**:\n",
    "1. **Slice-and-Dice**: Simple rectangular division\n",
    "2. **Squarified**: Optimizes aspect ratios\n",
    "3. **Strip**: Balance between simplicity and aesthetics\n",
    "\n",
    "**Performance Complexity**:\n",
    "- Tree Map: $O(n \\log n)$ for sorting + $O(n)$ for layout\n",
    "- Choropleth: $O(n)$ for data binding + $O(m)$ for geographic features\n",
    "\n",
    "#### Cross-Reference\n",
    "*See `01_descriptive_statistics_interactive.ipynb` for data distribution analysis and `statistical_formulas_reference.ipynb` for visualization theory applications.*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "4c5d68f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "============================================================\n",
      "HISTOGRAM TYPES AND GEOGRAPHIC VISUALIZATIONS\n",
      "============================================================\n",
      "PART 1: DIFFERENT TYPES OF HISTOGRAMS\n",
      "========================================\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1200 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "HISTOGRAM TYPES EXPLAINED:\n",
      "------------------------------\n",
      "1. **Basic Histogram**: Shows frequency distribution of continuous data\n",
      "2. **Variable Bin Size**: Different bin numbers affect granularity and pattern visibility\n",
      "3. **Normalized/Density**: Shows probability density instead of raw frequency\n",
      "4. **Stacked Histogram**: Compares multiple groups by stacking their frequencies\n",
      "5. **Side-by-side**: Compares multiple groups with separate bars\n",
      "6. **Categorical**: Bar chart for categorical data (discrete categories)\n",
      "\n",
      "============================================================\n",
      "PART 2: TREE MAP vs CHOROPLETH MAP\n",
      "============================================================\n",
      "TREE MAP DEMONSTRATION:\n",
      "-------------------------\n",
      "Tree Map Example: Technology Companies Market Capitalization\n",
      "• Apple (Technology): $2800B\n",
      "• Microsoft (Technology): $2400B\n",
      "• Amazon (E-commerce): $1500B\n",
      "• Google (Technology): $1600B\n",
      "• Meta (Technology): $800B\n",
      "• Tesla (Automotive): $900B\n",
      "• Netflix (Entertainment): $200B\n",
      "• Adobe (Technology): $250B\n",
      "\n",
      "----------------------------------------\n",
      "CHOROPLETH MAP DEMONSTRATION:\n",
      "------------------------------\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Choropleth Map Example: US States Population Density\n",
      "• California: 253 people/sq mile\n",
      "• Texas: 109 people/sq mile\n",
      "• Florida: 384 people/sq mile\n",
      "• New York: 416 people/sq mile\n",
      "• Pennsylvania: 286 people/sq mile\n",
      "• Illinois: 231 people/sq mile\n",
      "• Ohio: 287 people/sq mile\n",
      "• Georgia: 186 people/sq mile\n",
      "\n",
      "============================================================\n",
      "KEY DIFFERENCES: TREE MAP vs CHOROPLETH MAP\n",
      "============================================================\n",
      "            Aspect                                              Tree Map                                            Choropleth Map\n",
      "           Purpose Show hierarchical data and proportional relationships                      Show geographic distribution of data\n",
      "         Data Type       Quantitative data with categories/subcategories              Quantitative data tied to geographic regions\n",
      "  Visual Structure                    Nested rectangles of varying sizes              Geographic boundaries colored by data values\n",
      "Geographic Element                     No geographic boundaries required  Requires geographic boundaries (countries, states, etc.)\n",
      "         Hierarchy        Excellent for showing hierarchy and drill-down                                 No hierarchical structure\n",
      "         Use Cases    Market share, file systems, organizational budgets Election results, disease prevalence, economic indicators\n",
      "\n",
      "==================================================\n",
      "PRACTICAL EXAMPLES:\n",
      "==================================================\n",
      "🔲 TREE MAP Examples:\n",
      "• Technology company market capitalization breakdown\n",
      "• Government budget allocation by departments and sub-departments\n",
      "• Website traffic by source and sub-source\n",
      "• Product sales by category and subcategory\n",
      "\n",
      "🗺️ CHOROPLETH MAP Examples:\n",
      "• COVID-19 cases by country/state\n",
      "• Election results showing voting patterns by region\n",
      "• Income levels across different counties\n",
      "• Temperature variations across geographic regions\n",
      "\n",
      "==================================================\n",
      "WHEN TO USE EACH:\n",
      "==================================================\n",
      "📊 Use TREE MAP when:\n",
      "• Data has hierarchical structure\n",
      "• Want to show part-to-whole relationships\n",
      "• Geographic location is not important\n",
      "• Need to compare sizes/proportions\n",
      "\n",
      "🌍 Use CHOROPLETH MAP when:\n",
      "• Data is tied to geographic locations\n",
      "• Want to show spatial patterns\n",
      "• Geographic distribution matters\n",
      "• Analyzing regional variations\n"
     ]
    }
   ],
   "source": [
    "# Histogram Types and Geographic Visualizations\n",
    "print(\"=\"*60)\n",
    "print(\"HISTOGRAM TYPES AND GEOGRAPHIC VISUALIZATIONS\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "print(\"PART 1: DIFFERENT TYPES OF HISTOGRAMS\")\n",
    "print(\"=\"*40)\n",
    "\n",
    "# Generate sample data for histogram demonstrations\n",
    "np.random.seed(42)\n",
    "data_normal = np.random.normal(50, 15, 1000)\n",
    "data_uniform = np.random.uniform(0, 100, 1000)\n",
    "data_skewed = np.random.exponential(20, 1000)\n",
    "categories = ['A', 'B', 'C', 'D', 'E']\n",
    "category_counts = [45, 38, 52, 29, 36]\n",
    "\n",
    "# Create different types of histograms\n",
    "fig, axes = plt.subplots(2, 3, figsize=(18, 12))\n",
    "\n",
    "# 1. Basic Histogram\n",
    "axes[0, 0].hist(data_normal, bins=30, alpha=0.7, color='blue', edgecolor='black')\n",
    "axes[0, 0].set_title('1. Basic Histogram\\n(Normal Distribution)')\n",
    "axes[0, 0].set_xlabel('Value')\n",
    "axes[0, 0].set_ylabel('Frequency')\n",
    "\n",
    "# 2. Histogram with Different Bin Sizes\n",
    "axes[0, 1].hist(data_normal, bins=10, alpha=0.7, color='green', edgecolor='black', label='10 bins')\n",
    "axes[0, 1].hist(data_normal, bins=50, alpha=0.5, color='red', edgecolor='black', label='50 bins')\n",
    "axes[0, 1].set_title('2. Histograms with Different Bin Sizes')\n",
    "axes[0, 1].set_xlabel('Value')\n",
    "axes[0, 1].set_ylabel('Frequency')\n",
    "axes[0, 1].legend()\n",
    "\n",
    "# 3. Normalized Histogram (Density)\n",
    "axes[0, 2].hist(data_normal, bins=30, density=True, alpha=0.7, color='purple', edgecolor='black')\n",
    "axes[0, 2].set_title('3. Normalized Histogram\\n(Probability Density)')\n",
    "axes[0, 2].set_xlabel('Value')\n",
    "axes[0, 2].set_ylabel('Density')\n",
    "\n",
    "# 4. Stacked Histogram\n",
    "data1 = np.random.normal(40, 10, 500)\n",
    "data2 = np.random.normal(60, 12, 500)\n",
    "axes[1, 0].hist([data1, data2], bins=25, alpha=0.7, color=['blue', 'orange'],\n",
    "                label=['Group 1', 'Group 2'], stacked=True, edgecolor='black')\n",
    "axes[1, 0].set_title('4. Stacked Histogram')\n",
    "axes[1, 0].set_xlabel('Value')\n",
    "axes[1, 0].set_ylabel('Frequency')\n",
    "axes[1, 0].legend()\n",
    "\n",
    "# 5. Side-by-side Histogram\n",
    "axes[1, 1].hist([data1, data2], bins=25, alpha=0.7, color=['blue', 'orange'],\n",
    "                label=['Group 1', 'Group 2'], edgecolor='black')\n",
    "axes[1, 1].set_title('5. Side-by-side Histogram')\n",
    "axes[1, 1].set_xlabel('Value')\n",
    "axes[1, 1].set_ylabel('Frequency')\n",
    "axes[1, 1].legend()\n",
    "\n",
    "# 6. Categorical Histogram (Bar Chart)\n",
    "axes[1, 2].bar(categories, category_counts, alpha=0.7, color='teal', edgecolor='black')\n",
    "axes[1, 2].set_title('6. Categorical Histogram\\n(Bar Chart)')\n",
    "axes[1, 2].set_xlabel('Category')\n",
    "axes[1, 2].set_ylabel('Count')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"\\nHISTOGRAM TYPES EXPLAINED:\")\n",
    "print(\"-\" * 30)\n",
    "print(\"1. **Basic Histogram**: Shows frequency distribution of continuous data\")\n",
    "print(\"2. **Variable Bin Size**: Different bin numbers affect granularity and pattern visibility\")\n",
    "print(\"3. **Normalized/Density**: Shows probability density instead of raw frequency\")\n",
    "print(\"4. **Stacked Histogram**: Compares multiple groups by stacking their frequencies\")\n",
    "print(\"5. **Side-by-side**: Compares multiple groups with separate bars\")\n",
    "print(\"6. **Categorical**: Bar chart for categorical data (discrete categories)\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "print(\"PART 2: TREE MAP vs CHOROPLETH MAP\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Create Tree Map example\n",
    "print(\"TREE MAP DEMONSTRATION:\")\n",
    "print(\"-\" * 25)\n",
    "\n",
    "# Sample data for tree map\n",
    "companies = ['Apple', 'Microsoft', 'Amazon', 'Google', 'Meta', 'Tesla', 'Netflix', 'Adobe']\n",
    "market_caps = [2800, 2400, 1500, 1600, 800, 900, 200, 250]\n",
    "sectors = ['Technology', 'Technology', 'E-commerce', 'Technology', 'Technology', 'Automotive', 'Entertainment', 'Technology']\n",
    "\n",
    "# Create a simple tree map representation using rectangles\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 8))\n",
    "\n",
    "# Tree Map simulation (using bar chart to represent hierarchical data)\n",
    "colors = plt.cm.Set3(np.linspace(0, 1, len(companies)))\n",
    "bars = ax1.barh(companies, market_caps, color=colors, edgecolor='white', linewidth=2)\n",
    "ax1.set_xlabel('Market Cap (Billions USD)')\n",
    "ax1.set_title('Tree Map Representation\\n(Market Capitalization by Company)')\n",
    "ax1.grid(True, alpha=0.3)\n",
    "\n",
    "# Add value labels on bars\n",
    "for i, (company, value) in enumerate(zip(companies, market_caps)):\n",
    "    ax1.text(value/2, i, f'${value}B', ha='center', va='center', fontweight='bold')\n",
    "\n",
    "print(\"Tree Map Example: Technology Companies Market Capitalization\")\n",
    "for company, cap, sector in zip(companies, market_caps, sectors):\n",
    "    print(f\"• {company} ({sector}): ${cap}B\")\n",
    "\n",
    "print(\"\\n\" + \"-\" * 40)\n",
    "print(\"CHOROPLETH MAP DEMONSTRATION:\")\n",
    "print(\"-\" * 30)\n",
    "\n",
    "# Simulate choropleth map data (US states population density)\n",
    "states = ['California', 'Texas', 'Florida', 'New York', 'Pennsylvania', 'Illinois', 'Ohio', 'Georgia']\n",
    "population_density = [253, 109, 384, 416, 286, 231, 287, 186]  # people per sq mile\n",
    "\n",
    "# Create a heatmap to simulate choropleth visualization\n",
    "state_data = pd.DataFrame({\n",
    "    'State': states,\n",
    "    'Population_Density': population_density\n",
    "})\n",
    "\n",
    "# Create color map based on density values\n",
    "normalized_density = (np.array(population_density) - min(population_density)) / (max(population_density) - min(population_density))\n",
    "colors_map = plt.cm.YlOrRd(normalized_density)\n",
    "\n",
    "bars2 = ax2.bar(range(len(states)), population_density, color=colors_map, edgecolor='black', linewidth=1)\n",
    "ax2.set_xticks(range(len(states)))\n",
    "ax2.set_xticklabels(states, rotation=45, ha='right')\n",
    "ax2.set_ylabel('Population Density (people/sq mile)')\n",
    "ax2.set_title('Choropleth Map Representation\\n(Population Density by State)')\n",
    "ax2.grid(True, alpha=0.3)\n",
    "\n",
    "# Add value labels\n",
    "for i, value in enumerate(population_density):\n",
    "    ax2.text(i, value + 10, str(value), ha='center', va='bottom', fontweight='bold')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"Choropleth Map Example: US States Population Density\")\n",
    "for state, density in zip(states, population_density):\n",
    "    print(f\"• {state}: {density} people/sq mile\")\n",
    "\n",
    "print(\"\\n\" + \"=\"*60)\n",
    "print(\"KEY DIFFERENCES: TREE MAP vs CHOROPLETH MAP\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "comparison_data = {\n",
    "    'Aspect': ['Purpose', 'Data Type', 'Visual Structure', 'Geographic Element', 'Hierarchy', 'Use Cases'],\n",
    "    'Tree Map': [\n",
    "        'Show hierarchical data and proportional relationships',\n",
    "        'Quantitative data with categories/subcategories',\n",
    "        'Nested rectangles of varying sizes',\n",
    "        'No geographic boundaries required',\n",
    "        'Excellent for showing hierarchy and drill-down',\n",
    "        'Market share, file systems, organizational budgets'\n",
    "    ],\n",
    "    'Choropleth Map': [\n",
    "        'Show geographic distribution of data',\n",
    "        'Quantitative data tied to geographic regions',\n",
    "        'Geographic boundaries colored by data values',\n",
    "        'Requires geographic boundaries (countries, states, etc.)',\n",
    "        'No hierarchical structure',\n",
    "        'Election results, disease prevalence, economic indicators'\n",
    "    ]\n",
    "}\n",
    "\n",
    "comparison_df = pd.DataFrame(comparison_data)\n",
    "print(comparison_df.to_string(index=False))\n",
    "\n",
    "print(f\"\\n\" + \"=\"*50)\n",
    "print(\"PRACTICAL EXAMPLES:\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "print(\"🔲 TREE MAP Examples:\")\n",
    "print(\"• Technology company market capitalization breakdown\")\n",
    "print(\"• Government budget allocation by departments and sub-departments\")\n",
    "print(\"• Website traffic by source and sub-source\")\n",
    "print(\"• Product sales by category and subcategory\")\n",
    "\n",
    "print(\"\\n🗺️ CHOROPLETH MAP Examples:\")\n",
    "print(\"• COVID-19 cases by country/state\")\n",
    "print(\"• Election results showing voting patterns by region\")\n",
    "print(\"• Income levels across different counties\")\n",
    "print(\"• Temperature variations across geographic regions\")\n",
    "\n",
    "print(f\"\\n\" + \"=\"*50)\n",
    "print(\"WHEN TO USE EACH:\")\n",
    "print(\"=\"*50)\n",
    "print(\"📊 Use TREE MAP when:\")\n",
    "print(\"• Data has hierarchical structure\")\n",
    "print(\"• Want to show part-to-whole relationships\")\n",
    "print(\"• Geographic location is not important\")\n",
    "print(\"• Need to compare sizes/proportions\")\n",
    "\n",
    "print(\"\\n🌍 Use CHOROPLETH MAP when:\")\n",
    "print(\"• Data is tied to geographic locations\")\n",
    "print(\"• Want to show spatial patterns\")\n",
    "print(\"• Geographic distribution matters\")\n",
    "print(\"• Analyzing regional variations\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91788383",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### Q4. Investment Portfolio Risk Analysis\n",
    "\n",
    "**Problem**: As a financial analyst, evaluate the risk of two investment portfolios with monthly returns over 12 months.\n",
    "\n",
    "**Data - Monthly Returns (%):**\n",
    "\n",
    "| Month | Portfolio A | Portfolio B |\n",
    "|-------|-------------|-------------|\n",
    "| 1     | 3.2         | 4.1         |\n",
    "| 2     | 2.8         | 3.5         |\n",
    "| 3     | 4.5         | 5.0         |\n",
    "| 4     | 3.7         | 4.2         |\n",
    "| 5     | 2.9         | 4.5         |\n",
    "| 6     | 4.0         | 3.8         |\n",
    "| 7     | 3.1         | 4.4         |\n",
    "| 8     | 4.2         | 3.9         |\n",
    "| 9     | 3.3         | 4.6         |\n",
    "| 10    | 2.7         | 4.3         |\n",
    "| 11    | 4.1         | 4.0         |\n",
    "| 12    | 3.6         | 4.7         |\n",
    "\n",
    "**Tasks:**\n",
    "1. **Mean Calculation**: Calculate mean monthly return for both portfolios and discuss performance\n",
    "2. **Variance Calculation**: Calculate variance and explain what it reveals about consistency\n",
    "3. **Standard Deviation Calculation**: Compute standard deviation and compare risk\n",
    "4. **Risk Assessment**: Recommend portfolio for risk-averse investor with justification\n",
    "\n",
    "**Question 4: Outlier Impact Analysis**\n",
    "\n",
    "**Adding $500,000 Salary:** $\\mathcal{S}' = \\mathcal{S} \\cup \\{500000\\}$, $n' = 14$\n",
    "\n",
    "**New Mean Calculation:**\n",
    "$$\\bar{x}_{new} = \\frac{1,122,000 + 500,000}{14} = \\frac{1,622,000}{14} = \\$115,857.14$$\n",
    "\n",
    "**Impact on Mean:**\n",
    "$$\\Delta_{\\text{mean}} = \\$115,857.14 - \\$86,307.69 = \\$29,549.45$$\n",
    "$$\\text{Relative Change} = \\frac{29,549.45}{86,307.69} = 34.2\\%$$\n",
    "\n",
    "**New Median Calculation:** $n' = 14$ (even), so:\n",
    "$$\\text{Median}_{new} = \\frac{x_{(7)} + x_{(8)}}{2} = \\frac{75,000 + 80,000}{2} = \\$77,500$$\n",
    "\n",
    "**Impact on Median:**\n",
    "$$\\Delta_{\\text{median}} = \\$77,500 - \\$75,000 = \\$2,500$$\n",
    "$$\\text{Relative Change} = \\frac{2,500}{75,000} = 3.3\\%$$\n",
    "\n",
    "**Standard Deviation Analysis:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5b3b03ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "============================================================\n",
      "INVESTMENT PORTFOLIO RISK ANALYSIS\n",
      "============================================================\n",
      "MONTHLY RETURNS DATA:\n",
      "    Month  Portfolio_A  Portfolio_B\n",
      "0       1          3.2          4.1\n",
      "1       2          2.8          3.5\n",
      "2       3          4.5          5.0\n",
      "3       4          3.7          4.2\n",
      "4       5          2.9          4.5\n",
      "5       6          4.0          3.8\n",
      "6       7          3.1          4.4\n",
      "7       8          4.2          3.9\n",
      "8       9          3.3          4.6\n",
      "9      10          2.7          4.3\n",
      "10     11          4.1          4.0\n",
      "11     12          3.6          4.7\n",
      "\n",
      "============================================================\n",
      "TASK 1: MEAN CALCULATION AND PERFORMANCE ANALYSIS\n",
      "============================================================\n",
      "Portfolio A Mean Return: 3.5083% per month\n",
      "Portfolio B Mean Return: 4.2500% per month\n",
      "Difference: 0.7417% (Portfolio B advantage)\n",
      "\n",
      "ANNUALIZED RETURNS (Compounded):\n",
      "Portfolio A: 51.25% per year\n",
      "Portfolio B: 64.78% per year\n",
      "\n",
      "PERFORMANCE ANALYSIS:\n",
      "• Portfolio B has higher average monthly returns (4.25% vs 3.51%)\n",
      "• Portfolio B provides 21.1% higher returns on average\n",
      "• Over 12 months, Portfolio B outperformed A by 13.53% annually\n",
      "• Both portfolios show positive returns across all months\n",
      "\n",
      "============================================================\n",
      "TASK 2: VARIANCE CALCULATION AND CONSISTENCY ANALYSIS\n",
      "============================================================\n",
      "POPULATION VARIANCE (N):\n",
      "Portfolio A Variance: 0.327431\n",
      "Portfolio B Variance: 0.162500\n",
      "\n",
      "SAMPLE VARIANCE (N-1):\n",
      "Portfolio A Variance: 0.357197\n",
      "Portfolio B Variance: 0.177273\n",
      "\n",
      "MANUAL VARIANCE CALCULATION (Portfolio A):\n",
      "Step 1 - Calculate deviations from mean:\n",
      "  Month 1: 3.2 - 3.5083 = -0.3083\n",
      "  Month 2: 2.8 - 3.5083 = -0.7083\n",
      "  Month 3: 4.5 - 3.5083 = 0.9917\n",
      "  Month 4: 3.7 - 3.5083 = 0.1917\n",
      "  Month 5: 2.9 - 3.5083 = -0.6083\n",
      "  Month 6: 4.0 - 3.5083 = 0.4917\n",
      "  Month 7: 3.1 - 3.5083 = -0.4083\n",
      "  Month 8: 4.2 - 3.5083 = 0.6917\n",
      "  Month 9: 3.3 - 3.5083 = -0.2083\n",
      "  Month 10: 2.7 - 3.5083 = -0.8083\n",
      "  Month 11: 4.1 - 3.5083 = 0.5917\n",
      "  Month 12: 3.6 - 3.5083 = 0.0917\n",
      "\n",
      "Step 2 - Square the deviations:\n",
      "  Month 1: (-0.3083)² = 0.095069\n",
      "  Month 2: (-0.7083)² = 0.501736\n",
      "  Month 3: (0.9917)² = 0.983403\n",
      "  Month 4: (0.1917)² = 0.036736\n",
      "  Month 5: (-0.6083)² = 0.370069\n",
      "  Month 6: (0.4917)² = 0.241736\n",
      "  Month 7: (-0.4083)² = 0.166736\n",
      "  Month 8: (0.6917)² = 0.478403\n",
      "  Month 9: (-0.2083)² = 0.043403\n",
      "  Month 10: (-0.8083)² = 0.653403\n",
      "  Month 11: (0.5917)² = 0.350069\n",
      "  Month 12: (0.0917)² = 0.008403\n",
      "\n",
      "Step 3 - Sum of squared deviations: 3.929167\n",
      "Step 4 - Divide by N: 3.929167 / 12 = 0.327431\n",
      "\n",
      "CONSISTENCY ANALYSIS:\n",
      "• Portfolio B is more consistent (lower variance: 0.162500)\n",
      "• Portfolio A is less consistent (higher variance: 0.327431)\n",
      "• Variance difference: 0.164931\n",
      "• Lower variance indicates more predictable returns\n",
      "• Higher variance suggests more volatile performance\n",
      "\n",
      "============================================================\n",
      "TASK 3: STANDARD DEVIATION CALCULATION AND RISK COMPARISON\n",
      "============================================================\n",
      "POPULATION STANDARD DEVIATION:\n",
      "Portfolio A: 0.5722%\n",
      "Portfolio B: 0.4031%\n",
      "\n",
      "SAMPLE STANDARD DEVIATION:\n",
      "Portfolio A: 0.5977%\n",
      "Portfolio B: 0.4210%\n",
      "\n",
      "VERIFICATION (√variance = std dev):\n",
      "Portfolio A: √0.327431 = 0.5722%\n",
      "Portfolio B: √0.162500 = 0.4031%\n",
      "\n",
      "RISK COMPARISON:\n",
      "• Portfolio B has LOWER RISK (std dev: 0.4031%)\n",
      "• Portfolio A has HIGHER RISK (std dev: 0.5722%)\n",
      "• Risk difference: 0.1691%\n",
      "\n",
      "COEFFICIENT OF VARIATION (Risk per unit of return):\n",
      "Portfolio A: 16.31%\n",
      "Portfolio B: 9.49%\n",
      "• Portfolio B offers better risk-adjusted returns\n",
      "\n",
      "============================================================\n",
      "TASK 4: RISK ASSESSMENT AND RECOMMENDATION\n",
      "============================================================\n",
      "COMPREHENSIVE RISK ANALYSIS:\n",
      "Metric                    Portfolio A     Portfolio B     Winner\n",
      "-----------------------------------------------------------------\n",
      "Mean Return               3.5083          4.2500          B\n",
      "Variance                  0.327431        0.162500        B (lower is better)\n",
      "Standard Deviation        0.5722          0.4031          B (lower is better)\n",
      "Coeff. of Variation       16.31           9.49            B (lower is better)\n",
      "Range                     1.8             1.5             B (lower is better)\n",
      "\n",
      "==================================================\n",
      "RECOMMENDATION FOR RISK-AVERSE INVESTOR:\n",
      "==================================================\n",
      "🎯 RECOMMENDATION: Portfolio B\n",
      "\n",
      "JUSTIFICATION:\n",
      "1. **Lower Risk**: Portfolio B has 0.1691% lower standard deviation\n",
      "2. **More Predictable**: Lower variance means more consistent returns\n",
      "3. **Risk-Return Trade-off**: Sacrificing only 0.7417% return for significantly lower risk\n",
      "\n",
      "QUANTITATIVE ANALYSIS:\n",
      "• Portfolio B standard deviation: 0.4031% (lower risk)\n",
      "• Portfolio A standard deviation: 0.5722% (higher risk)\n",
      "• Return sacrifice: -0.7417% per month\n",
      "• Risk reduction: 0.1691% standard deviation\n",
      "\n",
      "RISK-AVERSE INVESTOR PRIORITIES:\n",
      "• Capital preservation over maximum returns\n",
      "• Predictable and consistent performance\n",
      "• Lower volatility in monthly returns\n",
      "• Better sleep at night with stable investments\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "============================================================\n",
      "FINAL SUMMARY\n",
      "============================================================\n",
      "For a risk-averse investor, Portfolio B is the better choice because:\n",
      "• Lower volatility (0.4031% vs 0.5722% standard deviation)\n",
      "• More consistent returns (variance: 0.162500 vs 0.327431)\n",
      "• Better risk-adjusted performance (lower coefficient of variation)\n",
      "• Minimal sacrifice in expected returns for significantly reduced risk\n"
     ]
    }
   ],
   "source": [
    "# Investment Portfolio Risk Analysis\n",
    "print(\"=\"*60)\n",
    "print(\"INVESTMENT PORTFOLIO RISK ANALYSIS\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Input data\n",
    "months = list(range(1, 13))\n",
    "portfolio_a = [3.2, 2.8, 4.5, 3.7, 2.9, 4.0, 3.1, 4.2, 3.3, 2.7, 4.1, 3.6]\n",
    "portfolio_b = [4.1, 3.5, 5.0, 4.2, 4.5, 3.8, 4.4, 3.9, 4.6, 4.3, 4.0, 4.7]\n",
    "\n",
    "# Create DataFrame for analysis\n",
    "portfolio_data = pd.DataFrame({\n",
    "    'Month': months,\n",
    "    'Portfolio_A': portfolio_a,\n",
    "    'Portfolio_B': portfolio_b\n",
    "})\n",
    "\n",
    "print(\"MONTHLY RETURNS DATA:\")\n",
    "print(portfolio_data)\n",
    "\n",
    "print(f\"\\n\" + \"=\"*60)\n",
    "print(\"TASK 1: MEAN CALCULATION AND PERFORMANCE ANALYSIS\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Calculate means\n",
    "mean_a = np.mean(portfolio_a)\n",
    "mean_b = np.mean(portfolio_b)\n",
    "\n",
    "print(f\"Portfolio A Mean Return: {mean_a:.4f}% per month\")\n",
    "print(f\"Portfolio B Mean Return: {mean_b:.4f}% per month\")\n",
    "print(f\"Difference: {mean_b - mean_a:.4f}% (Portfolio B advantage)\")\n",
    "\n",
    "# Annualized returns (compounded)\n",
    "annual_return_a = ((1 + mean_a/100) ** 12 - 1) * 100\n",
    "annual_return_b = ((1 + mean_b/100) ** 12 - 1) * 100\n",
    "\n",
    "print(f\"\\nANNUALIZED RETURNS (Compounded):\")\n",
    "print(f\"Portfolio A: {annual_return_a:.2f}% per year\")\n",
    "print(f\"Portfolio B: {annual_return_b:.2f}% per year\")\n",
    "\n",
    "print(f\"\\nPERFORMANCE ANALYSIS:\")\n",
    "print(f\"• Portfolio B has higher average monthly returns ({mean_b:.2f}% vs {mean_a:.2f}%)\")\n",
    "print(f\"• Portfolio B provides {((mean_b/mean_a - 1) * 100):.1f}% higher returns on average\")\n",
    "print(f\"• Over 12 months, Portfolio B outperformed A by {annual_return_b - annual_return_a:.2f}% annually\")\n",
    "print(f\"• Both portfolios show positive returns across all months\")\n",
    "\n",
    "print(f\"\\n\" + \"=\"*60)\n",
    "print(\"TASK 2: VARIANCE CALCULATION AND CONSISTENCY ANALYSIS\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Calculate variance (population variance using N)\n",
    "variance_a = np.var(portfolio_a, ddof=0)  # Population variance\n",
    "variance_b = np.var(portfolio_b, ddof=0)\n",
    "\n",
    "# Calculate sample variance (using N-1)\n",
    "sample_variance_a = np.var(portfolio_a, ddof=1)  # Sample variance\n",
    "sample_variance_b = np.var(portfolio_b, ddof=1)\n",
    "\n",
    "print(f\"POPULATION VARIANCE (N):\")\n",
    "print(f\"Portfolio A Variance: {variance_a:.6f}\")\n",
    "print(f\"Portfolio B Variance: {variance_b:.6f}\")\n",
    "\n",
    "print(f\"\\nSAMPLE VARIANCE (N-1):\")\n",
    "print(f\"Portfolio A Variance: {sample_variance_a:.6f}\")\n",
    "print(f\"Portfolio B Variance: {sample_variance_b:.6f}\")\n",
    "\n",
    "# Manual calculation demonstration\n",
    "print(f\"\\nMANUAL VARIANCE CALCULATION (Portfolio A):\")\n",
    "print(f\"Step 1 - Calculate deviations from mean:\")\n",
    "deviations_a = [(x - mean_a) for x in portfolio_a]\n",
    "for i, (return_val, dev) in enumerate(zip(portfolio_a, deviations_a), 1):\n",
    "    print(f\"  Month {i}: {return_val:.1f} - {mean_a:.4f} = {dev:.4f}\")\n",
    "\n",
    "squared_deviations_a = [dev**2 for dev in deviations_a]\n",
    "print(f\"\\nStep 2 - Square the deviations:\")\n",
    "for i, sq_dev in enumerate(squared_deviations_a, 1):\n",
    "    print(f\"  Month {i}: ({deviations_a[i-1]:.4f})² = {sq_dev:.6f}\")\n",
    "\n",
    "sum_squared_dev_a = sum(squared_deviations_a)\n",
    "print(f\"\\nStep 3 - Sum of squared deviations: {sum_squared_dev_a:.6f}\")\n",
    "print(f\"Step 4 - Divide by N: {sum_squared_dev_a:.6f} / 12 = {variance_a:.6f}\")\n",
    "\n",
    "print(f\"\\nCONSISTENCY ANALYSIS:\")\n",
    "if variance_a < variance_b:\n",
    "    more_consistent = \"Portfolio A\"\n",
    "    less_consistent = \"Portfolio B\"\n",
    "    var_diff = variance_b - variance_a\n",
    "else:\n",
    "    more_consistent = \"Portfolio B\"\n",
    "    less_consistent = \"Portfolio A\"\n",
    "    var_diff = variance_a - variance_b\n",
    "\n",
    "print(f\"• {more_consistent} is more consistent (lower variance: {min(variance_a, variance_b):.6f})\")\n",
    "print(f\"• {less_consistent} is less consistent (higher variance: {max(variance_a, variance_b):.6f})\")\n",
    "print(f\"• Variance difference: {var_diff:.6f}\")\n",
    "print(f\"• Lower variance indicates more predictable returns\")\n",
    "print(f\"• Higher variance suggests more volatile performance\")\n",
    "\n",
    "print(f\"\\n\" + \"=\"*60)\n",
    "print(\"TASK 3: STANDARD DEVIATION CALCULATION AND RISK COMPARISON\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "# Calculate standard deviation\n",
    "std_a = np.std(portfolio_a, ddof=0)  # Population std dev\n",
    "std_b = np.std(portfolio_b, ddof=0)\n",
    "\n",
    "sample_std_a = np.std(portfolio_a, ddof=1)  # Sample std dev\n",
    "sample_std_b = np.std(portfolio_b, ddof=1)\n",
    "\n",
    "print(f\"POPULATION STANDARD DEVIATION:\")\n",
    "print(f\"Portfolio A: {std_a:.4f}%\")\n",
    "print(f\"Portfolio B: {std_b:.4f}%\")\n",
    "\n",
    "print(f\"\\nSAMPLE STANDARD DEVIATION:\")\n",
    "print(f\"Portfolio A: {sample_std_a:.4f}%\")\n",
    "print(f\"Portfolio B: {sample_std_b:.4f}%\")\n",
    "\n",
    "# Verify calculation: std dev = sqrt(variance)\n",
    "print(f\"\\nVERIFICATION (√variance = std dev):\")\n",
    "print(f\"Portfolio A: √{variance_a:.6f} = {np.sqrt(variance_a):.4f}%\")\n",
    "print(f\"Portfolio B: √{variance_b:.6f} = {np.sqrt(variance_b):.4f}%\")\n",
    "\n",
    "print(f\"\\nRISK COMPARISON:\")\n",
    "if std_a < std_b:\n",
    "    lower_risk = \"Portfolio A\"\n",
    "    higher_risk = \"Portfolio B\"\n",
    "    risk_diff = std_b - std_a\n",
    "else:\n",
    "    lower_risk = \"Portfolio B\"\n",
    "    higher_risk = \"Portfolio A\"\n",
    "    risk_diff = std_a - std_b\n",
    "\n",
    "print(f\"• {lower_risk} has LOWER RISK (std dev: {min(std_a, std_b):.4f}%)\")\n",
    "print(f\"• {higher_risk} has HIGHER RISK (std dev: {max(std_a, std_b):.4f}%)\")\n",
    "print(f\"• Risk difference: {risk_diff:.4f}%\")\n",
    "\n",
    "# Risk metrics\n",
    "cv_a = (std_a / mean_a) * 100  # Coefficient of variation\n",
    "cv_b = (std_b / mean_b) * 100\n",
    "\n",
    "print(f\"\\nCOEFFICIENT OF VARIATION (Risk per unit of return):\")\n",
    "print(f\"Portfolio A: {cv_a:.2f}%\")\n",
    "print(f\"Portfolio B: {cv_b:.2f}%\")\n",
    "\n",
    "if cv_a < cv_b:\n",
    "    print(f\"• Portfolio A offers better risk-adjusted returns\")\n",
    "else:\n",
    "    print(f\"• Portfolio B offers better risk-adjusted returns\")\n",
    "\n",
    "print(f\"\\n\" + \"=\"*60)\n",
    "print(\"TASK 4: RISK ASSESSMENT AND RECOMMENDATION\")\n",
    "print(\"=\"*60)\n",
    "\n",
    "print(f\"COMPREHENSIVE RISK ANALYSIS:\")\n",
    "print(f\"{'Metric':<25} {'Portfolio A':<15} {'Portfolio B':<15} {'Winner'}\")\n",
    "print(\"-\" * 65)\n",
    "print(f\"{'Mean Return':<25} {mean_a:<15.4f} {mean_b:<15.4f} {'B' if mean_b > mean_a else 'A'}\")\n",
    "print(f\"{'Variance':<25} {variance_a:<15.6f} {variance_b:<15.6f} {'A' if variance_a < variance_b else 'B'} (lower is better)\")\n",
    "print(f\"{'Standard Deviation':<25} {std_a:<15.4f} {std_b:<15.4f} {'A' if std_a < std_b else 'B'} (lower is better)\")\n",
    "print(f\"{'Coeff. of Variation':<25} {cv_a:<15.2f} {cv_b:<15.2f} {'A' if cv_a < cv_b else 'B'} (lower is better)\")\n",
    "\n",
    "# Calculate range and other risk measures\n",
    "range_a = max(portfolio_a) - min(portfolio_a)\n",
    "range_b = max(portfolio_b) - min(portfolio_b)\n",
    "\n",
    "print(f\"{'Range':<25} {range_a:<15.1f} {range_b:<15.1f} {'A' if range_a < range_b else 'B'} (lower is better)\")\n",
    "\n",
    "print(f\"\\n\" + \"=\"*50)\n",
    "print(\"RECOMMENDATION FOR RISK-AVERSE INVESTOR:\")\n",
    "print(\"=\"*50)\n",
    "\n",
    "if std_a < std_b:\n",
    "    recommended_portfolio = \"Portfolio A\"\n",
    "    risk_advantage = std_b - std_a\n",
    "    return_sacrifice = mean_b - mean_a\n",
    "else:\n",
    "    recommended_portfolio = \"Portfolio B\"\n",
    "    risk_advantage = std_a - std_b\n",
    "    return_sacrifice = mean_a - mean_b\n",
    "\n",
    "print(f\"🎯 RECOMMENDATION: {recommended_portfolio}\")\n",
    "\n",
    "print(f\"\\nJUSTIFICATION:\")\n",
    "print(f\"1. **Lower Risk**: {recommended_portfolio} has {risk_advantage:.4f}% lower standard deviation\")\n",
    "print(f\"2. **More Predictable**: Lower variance means more consistent returns\")\n",
    "print(f\"3. **Risk-Return Trade-off**: Sacrificing only {abs(return_sacrifice):.4f}% return for significantly lower risk\")\n",
    "\n",
    "print(f\"\\nQUANTITATIVE ANALYSIS:\")\n",
    "if recommended_portfolio == \"Portfolio A\":\n",
    "    print(f\"• Portfolio A standard deviation: {std_a:.4f}% (lower risk)\")\n",
    "    print(f\"• Portfolio B standard deviation: {std_b:.4f}% (higher risk)\")\n",
    "    print(f\"• Return sacrifice: {return_sacrifice:.4f}% per month\")\n",
    "    print(f\"• Risk reduction: {risk_advantage:.4f}% standard deviation\")\n",
    "else:\n",
    "    print(f\"• Portfolio B standard deviation: {std_b:.4f}% (lower risk)\")\n",
    "    print(f\"• Portfolio A standard deviation: {std_a:.4f}% (higher risk)\")\n",
    "    print(f\"• Return sacrifice: {return_sacrifice:.4f}% per month\")\n",
    "    print(f\"• Risk reduction: {risk_advantage:.4f}% standard deviation\")\n",
    "\n",
    "print(f\"\\nRISK-AVERSE INVESTOR PRIORITIES:\")\n",
    "print(f\"• Capital preservation over maximum returns\")\n",
    "print(f\"• Predictable and consistent performance\")\n",
    "print(f\"• Lower volatility in monthly returns\")\n",
    "print(f\"• Better sleep at night with stable investments\")\n",
    "\n",
    "# Visualization\n",
    "plt.figure(figsize=(15, 10))\n",
    "\n",
    "# Plot 1: Monthly returns comparison\n",
    "plt.subplot(2, 2, 1)\n",
    "plt.plot(months, portfolio_a, 'o-', label='Portfolio A', linewidth=2, markersize=6)\n",
    "plt.plot(months, portfolio_b, 's-', label='Portfolio B', linewidth=2, markersize=6)\n",
    "plt.axhline(y=mean_a, color='blue', linestyle='--', alpha=0.7, label=f'Mean A ({mean_a:.2f}%)')\n",
    "plt.axhline(y=mean_b, color='orange', linestyle='--', alpha=0.7, label=f'Mean B ({mean_b:.2f}%)')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Return (%)')\n",
    "plt.title('Monthly Returns Comparison')\n",
    "plt.legend()\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Plot 2: Box plot for distribution comparison\n",
    "plt.subplot(2, 2, 2)\n",
    "portfolio_data_melted = portfolio_data.melt(id_vars=['Month'], var_name='Portfolio', value_name='Return')\n",
    "portfolio_data_melted['Portfolio'] = portfolio_data_melted['Portfolio'].str.replace('Portfolio_', 'Portfolio ')\n",
    "sns.boxplot(data=portfolio_data_melted, x='Portfolio', y='Return')\n",
    "plt.title('Return Distribution Comparison')\n",
    "plt.ylabel('Return (%)')\n",
    "\n",
    "# Plot 3: Risk-Return scatter\n",
    "plt.subplot(2, 2, 3)\n",
    "plt.scatter(std_a, mean_a, s=200, label='Portfolio A', alpha=0.7)\n",
    "plt.scatter(std_b, mean_b, s=200, label='Portfolio B', alpha=0.7)\n",
    "plt.xlabel('Risk (Standard Deviation %)')\n",
    "plt.ylabel('Return (Mean %)')\n",
    "plt.title('Risk-Return Profile')\n",
    "plt.legend()\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "# Plot 4: Histogram of returns\n",
    "plt.subplot(2, 2, 4)\n",
    "plt.hist(portfolio_a, alpha=0.7, label='Portfolio A', bins=8, edgecolor='black')\n",
    "plt.hist(portfolio_b, alpha=0.7, label='Portfolio B', bins=8, edgecolor='black')\n",
    "plt.xlabel('Return (%)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Return Distribution Histograms')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(f\"\\n\" + \"=\"*60)\n",
    "print(\"FINAL SUMMARY\")\n",
    "print(\"=\"*60)\n",
    "print(f\"For a risk-averse investor, {recommended_portfolio} is the better choice because:\")\n",
    "print(f\"• Lower volatility ({min(std_a, std_b):.4f}% vs {max(std_a, std_b):.4f}% standard deviation)\")\n",
    "print(f\"• More consistent returns (variance: {min(variance_a, variance_b):.6f} vs {max(variance_a, variance_b):.6f})\")\n",
    "print(f\"• Better risk-adjusted performance (lower coefficient of variation)\")\n",
    "print(f\"• Minimal sacrifice in expected returns for significantly reduced risk\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
